{"version":3,"sources":["SampleAnalyst.js","App.js","serviceWorker.js","index.js"],"names":["SampleAnalyst","sourceCode","run","goalOutput","goalSourceCode","isLive","Object","classCallCheck","this","undefined","sourcePieces","exec","toLowerCase","test","splitSource","split","result","display","output","goalResult","diffs","diffChars","goalLineNumber","goalColumnNumber","outputLineNumber","outputColumnNumber","matchCount","mismatchCount","allMarkers","map","diff","lineCount","value","match","length","lastGoalLine","lastGoalColumn","lastOutputLine","lastOutputColumn","added","removed","marker","startRow","startCol","endRow","endCol","className","type","lastNewLine","lastIndexOf","goalMarkers","filter","outputMarkers","forEach","matchPercentage","PythonContext","React","createContext","ProgressBar","stateClass","props","percentage","react_default","a","createElement","style","width","concat","Component","Editor","_this","possibleConstructorReturn","getPrototypeOf","call","state","selectedLine","content","createRef","handleScroll","bind","assertThisInitialized","onScroll","current","editor","session","getScrollTop","setScrollTop","scrollTop","setState","gotoLine","lib_default","ref","onChange","readOnly","onSelectionChange","onCursorChange","mode","theme","height","fontSize","showPrintMargin","markers","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","showLineNumbers","tabSize","FootnoteBuilder","coreProps","href","name","children","CodeSample","_this2","codeRunner","context","window","analyze","analyst","isPythonLoaded","source","originalSource","handleChange","handleReset","handleCursorChange","newSource","selection","selectionLead","row","prevProps","prevState","displayValue","displayEditor","progressBar","outputHeaders","outputSection","resetButton","App_Editor","onClick","App_ProgressBar","contextType","App","_this3","app","tutorials","pythonMessage","languagePluginLoader","then","pyodide","loadPackage","runPython","search","location","tutorialName","URLSearchParams","get","Provider","react_markdown_default","renderers","code","link","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d4d868f.chunk.js","sourcesContent":["import { diffChars } from 'diff';\n\nexport default class SampleAnalyst {\n\n    constructor(sourceCode, run, goalOutput, goalSourceCode, isLive) {\n        if (goalSourceCode !== undefined) {\n            this.sourceCode = sourceCode;\n            this.goalSourceCode = goalSourceCode;\n            this.isLive = true;\n        } else if (isLive === false) {\n            this.sourceCode = sourceCode;\n            this.isLive = isLive;\n        } else {\n            let sourcePieces =\n                /^(.*\\n)?( *##+ *((static)|(live))[ #]*\\n)(.*)$/is.exec(\n                    sourceCode);\n            if (sourcePieces !== null) {\n                this.sourceCode = (sourcePieces[1] || \"\") + sourcePieces[6];\n                this.isLive = sourcePieces[3].toLowerCase() === \"live\";\n            } else if (/>>>/.test(sourceCode)) {\n                this.sourceCode = sourceCode;\n                this.isLive = false;\n            } else {\n                this.isLive = true;\n                let splitSource = sourceCode.split(/ *##+ *Goal[ #]*\\n/i);\n                this.sourceCode = splitSource[0];\n                this.goalSourceCode = splitSource[1];\n            }\n        }\n        if (run !== undefined && this.isLive) {\n            let result = run(this.sourceCode);\n            this.display = result[0];\n            this.output = result[1];\n\n            if (goalOutput !== undefined) {\n                this.goalOutput = goalOutput;\n            } else if (this.goalSourceCode !== undefined) {\n                let goalResult = run(this.goalSourceCode);\n                this.goalOutput = goalResult[1];\n            }\n            if (this.goalOutput !== undefined) {\n                let diffs = diffChars(this.goalOutput, this.output),\n                    goalLineNumber = 0,\n                    goalColumnNumber = 0,\n                    outputLineNumber = 0,\n                    outputColumnNumber = 0,\n                    matchCount = 0,\n                    mismatchCount = 0,\n                    allMarkers = diffs.map(diff => {\n                        let lineCount = (diff.value.match(/\\n/g) || '').length,\n                            lastGoalLine = goalLineNumber + lineCount,\n                            lastGoalColumn = goalColumnNumber + diff.value.length,\n                            lastOutputLine = outputLineNumber + lineCount,\n                            lastOutputColumn = outputColumnNumber + diff.value.length;\n                        if (diff.added || diff.removed) {\n                            mismatchCount += diff.value.length;\n                        } else {\n                            matchCount += 2*diff.value.length;\n                        }\n                        let marker = {\n                            startRow: goalLineNumber,\n                            startCol: goalColumnNumber,\n                            endRow: lastGoalLine,\n                            endCol: lastGoalColumn,\n                            className: \"change-marker warning\",\n                            type: \"text\",\n                            added: diff.added,\n                            removed: diff.removed\n                        };\n                        if ( ! diff.removed) {\n                            marker.startRow = outputLineNumber;\n                            marker.startCol = outputColumnNumber;\n                            marker.endRow = lastOutputLine;\n                            marker.endCol = lastOutputColumn;\n                        }\n                        if (lineCount > 0) {\n                            let lastNewLine = diff.value.lastIndexOf('\\n');\n                            marker.endCol = diff.value.length - lastNewLine - 1;\n                            lastGoalColumn = lastOutputColumn = marker.endCol;\n                        }\n                        if ( ! diff.added) {\n                            goalLineNumber = lastGoalLine;\n                            goalColumnNumber = lastGoalColumn;\n                        }\n                        if ( ! diff.removed) {\n                            outputLineNumber = lastOutputLine;\n                            outputColumnNumber = lastOutputColumn;\n                        }\n                        return marker;\n                    });\n                this.goalMarkers = allMarkers.filter(marker => marker.removed);\n                this.outputMarkers = allMarkers.filter(marker => marker.added);\n                allMarkers.forEach(marker => {\n                    delete marker.added;\n                    delete marker.removed;\n                });\n                this.matchPercentage = 100 * (\n                    matchCount / (matchCount + mismatchCount));\n            }\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport AceEditor from 'react-ace';\nimport ReactMarkdown from 'react-markdown';\nimport SampleAnalyst from './SampleAnalyst.js';\nimport './App.css';\nimport tutorials from './tutorials.json';\n\nimport 'brace/mode/python';\nimport 'brace/mode/markdown';\nimport 'brace/theme/github';\n\nconst PythonContext = React.createContext('Python is loading...');\n\nclass ProgressBar extends Component {\n    render() {\n        let stateClass = (this.props.percentage < 50) ?\n            \"danger\" :\n            (this.props.percentage < 100) ?\n                \"warning\" :\n                \"success\";\n        return <div className=\"progressbar-wrapper \">\n            <div className={\"progressbar-filler \" + stateClass}\n                 style={{width: `${this.props.percentage}%`}}/>\n        </div>;\n    }\n}\n\nclass Editor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {selectedLine: undefined};\n        this.content = React.createRef();\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    handleScroll() {\n        this.props.onScroll(this.content.current.editor.session.getScrollTop());\n    }\n\n    componentDidUpdate() {\n        this.content.current.editor.session.setScrollTop(this.props.scrollTop);\n        if (this.props.selectedLine !== this.state.selectedLine) {\n            this.setState({selectedLine: this.props.selectedLine});\n            this.content.current.editor.gotoLine(this.props.selectedLine+1);\n        }\n    }\n\n    render() {\n        return <AceEditor\n            ref={this.content}\n            value={this.props.value}\n            onChange={this.props.onChange}\n            readOnly={this.props.readOnly}\n            onScroll={this.handleScroll}\n            onSelectionChange={this.props.onSelectionChange}\n            onCursorChange={this.props.onCursorChange}\n            mode={this.props.mode}\n            theme=\"github\"\n            width=\"100%\"\n            height=\"100%\"\n            fontSize={18}\n            showPrintMargin={true}\n            markers={this.props.markers}\n            showGutter={true}\n            highlightActiveLine={this.props.highlightActiveLine}\n            editorProps={{\n                $blockScrolling: Infinity\n            }}\n            setOptions={{\n                showLineNumbers: true,\n                tabSize: 4,\n            }}/>;\n    }\n}\n\nclass FootnoteBuilder extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let coreProps = {href: this.props.href};\n        if (this.props['data-sourcepos']) {\n            coreProps['data-sourcepos'] = this.props['data-sourcepos'];\n        }\n        let match = /^#(footnote\\d+)$/i.exec(coreProps.href);\n        if (match !== null) {\n            coreProps.name = match[1] + \"ref\";\n        } else {\n            match = /^#(footnote\\d+)ref$/i.exec(coreProps.href);\n            if (match !== null) {\n                coreProps.name = match[1];\n            }\n        }\n        return React.createElement('a', coreProps, this.props.children);\n    }\n}\n\nclass CodeSample extends Component {\n    static contextType = PythonContext;\n\n    constructor(props) {\n        super(props);\n        let codeRunner = this.context === null ? window.analyze : undefined,\n            analyst = new SampleAnalyst(props.value, codeRunner);\n        this.state = {\n            scrollTop: 0,\n            selectedLine: undefined,\n            isPythonLoaded: false,\n            source: analyst.sourceCode,\n            originalSource: analyst.sourceCode,\n            goalSourceCode: analyst.goalSourceCode,\n            display: analyst.display,\n            goalOutput: analyst.goalOutput,\n            output: analyst.output,\n            goalMarkers: analyst.goalMarkers,\n            outputMarkers: analyst.outputMarkers,\n            matchPercentage: analyst.matchPercentage,\n            isLive: analyst.isLive\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleCursorChange = this.handleCursorChange.bind(this);\n    }\n\n    handleChange(newSource) {\n        if (newSource === undefined) {\n            newSource = this.state.source;\n        }\n        let codeRunner = this.context === null ? window.analyze : undefined,\n            analyst = new SampleAnalyst(\n                newSource,\n                codeRunner,\n                this.state.goalOutput,\n                this.state.goalSourceCode,\n                this.state.isLive\n            );\n        this.setState({\n            source: newSource,\n            display: analyst.display,\n            output: analyst.output,\n            goalOutput: analyst.goalOutput,\n            goalMarkers: analyst.goalMarkers,\n            outputMarkers: analyst.outputMarkers,\n            matchPercentage: analyst.matchPercentage\n        });\n    }\n\n    handleReset() {\n        this.handleChange(this.state.originalSource);\n    }\n\n    handleScroll(scrollTop) {\n        this.setState({scrollTop: scrollTop});\n    }\n\n    handleCursorChange(selection) {\n        this.setState({selectedLine: selection.selectionLead.row});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.context !== null) {\n            if (this.context !== this.state.display) {\n                this.setState({display: this.context});\n            }\n        }\n        else if ( ! this.state.isPythonLoaded) {\n            this.handleChange();\n            this.setState({isPythonLoaded: true});\n        }\n    }\n\n    render() {\n        let displayValue = this.context;\n        if (displayValue === null) {\n            displayValue = this.state.display;\n        }\n        let displayEditor = null,\n            progressBar = null,\n            outputHeaders = null,\n            outputSection = null,\n            resetButton = null;\n        if (this.state.isLive) {\n            displayEditor = <div className=\"editor-pane\">\n                <Editor\n                    value={displayValue}\n                    scrollTop={this.state.scrollTop}\n                    readOnly={true}\n                    selectedLine={this.state.selectedLine}\n                    onChange={this.handleChange}\n                    onScroll={this.handleScroll}\n                    highlightActiveLine={true}\n                    mode=\"text\"/>\n            </div>;\n        }\n        if (this.state.source !== this.state.originalSource) {\n            resetButton = <div className=\"reset-wrapper\">\n                <button className=\"reset-code\" onClick={this.handleReset}>Reset</button>\n            </div>;\n        }\n        if (this.state.goalOutput !== undefined) {\n            progressBar = <ProgressBar percentage={this.state.matchPercentage}/>;\n            outputHeaders = <div className=\"editor-wrapper\">\n                <h4 className=\"editor-header\">Goal output</h4>\n                <h4 className=\"editor-header\">Your output</h4>\n            </div>;\n            outputSection = <div className=\"editor-wrapper\">\n                <div className=\"editor-pane\">\n                    <Editor\n                        value={this.state.goalOutput}\n                        markers={this.state.goalMarkers}\n                        readOnly={true}\n                        highlightActiveLine={false}\n                        mode=\"text\"/>\n                </div>\n                <div className=\"editor-pane\">\n                    <Editor\n                        value={this.state.output}\n                        markers={this.state.outputMarkers}\n                        readOnly={true}\n                        highlightActiveLine={false}\n                        mode=\"text\"/>\n                </div>\n            </div>;\n        }\n        return (\n            <div className=\"codeSample\">\n                <div className=\"editor-wrapper\">\n                    <div className=\"editor-pane\">\n                        <Editor\n                            value={this.state.source}\n                            scrollTop={this.state.scrollTop}\n                            onChange={this.handleChange}\n                            onScroll={this.handleScroll}\n                            onCursorChange={this.handleCursorChange}\n                            highlightActiveLine={true}\n                            mode=\"python\"/>\n                    </div>\n                    {displayEditor}\n                </div>\n                {resetButton}\n                {progressBar}\n                {outputHeaders}\n                {outputSection}\n          </div>\n    );\n  }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        let app = this;\n        this.state = {\n            source: tutorials['index'],\n            pythonMessage: 'Loading Python...'\n        };\n\n        // noinspection JSUnresolvedVariable\n        if (window.languagePluginLoader === undefined) {\n            this.state.pythonMessage = 'Python is not loaded!';\n        } else {\n            // noinspection JSUnresolvedVariable\n            window.languagePluginLoader.then(function() {\n                // noinspection JSUnresolvedVariable,JSUnresolvedFunction\n                window.pyodide.loadPackage('space-tracer').then(() => {\n                    // noinspection JSUnresolvedVariable,JSUnresolvedFunction\n                    window.pyodide.runPython(\n                        'from space_tracer.main import web_main; web_main()');\n                    app.setState({pythonMessage: null});\n                });\n            });\n        }\n        let search = window.location.search;\n        let params = new URLSearchParams(search);\n        let tutorialName = params.get('tutorial');\n        if (tutorialName) {\n            this.state.source = tutorials[tutorialName];\n            if (this.state.source === undefined) {\n                this.state.source = 'Tutorial not found: ' + tutorialName;\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <PythonContext.Provider value={this.state.pythonMessage}>\n                    <ReactMarkdown\n                        source={this.state.source}\n                        renderers={{\n                            code: CodeSample,\n                            link: FootnoteBuilder\n                        }}/>\n                </PythonContext.Provider>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}