{"version":3,"sources":["SampleAnalyst.js","App.js","serviceWorker.js","index.js"],"names":["unescapeString","value","startsWith","endsWith","substring","length","newValue","i","c","c2","charCode","parseInt","String","fromCharCode","match","parseFloat","SampleAnalyst","constructor","sourceCode","run","goalOutput","goalSourceCode","isLive","isCanvas","canvasSize","undefined","this","sourcePieces","exec","toLowerCase","test","splitSource","split","result","display","get","output","displayLines","currentCommand","shift","canvasCommands","nextLine","position","indexOf","coords","push","fieldName","fieldValue","fontMatch","fontName","fontSize","styleNames","name","join","goalResult","diffs","diffChars","goalLineNumber","goalColumnNumber","outputLineNumber","outputColumnNumber","matchCount","mismatchCount","allMarkers","map","diff","lineCount","lastGoalLine","lastGoalColumn","lastOutputLine","lastOutputColumn","added","removed","marker","startRow","startCol","endRow","endCol","className","type","lastNewLine","lastIndexOf","goalMarkers","filter","outputMarkers","forEach","matchPercentage","PythonContext","React","createContext","ProgressBar","Component","render","stateClass","props","percentage","style","width","Editor","super","state","selectedLine","content","createRef","handleScroll","bind","onScroll","current","editor","session","getScrollTop","componentDidUpdate","setScrollTop","scrollTop","setState","gotoLine","resize","ref","onChange","readOnly","onSelectionChange","onCursorChange","mode","theme","height","showPrintMargin","markers","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","showLineNumbers","tabSize","FootnoteBuilder","coreProps","href","createElement","children","CodeSample","handleResize","handleChange","codeRunner","context","window","analyze","analyst","isPythonLoaded","source","originalSource","handleReset","handleCursorChange","editorRef","canvasRef","newSource","canvas","drawCanvas","selection","getSelectionLead","row","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","commands","clientWidth","clientHeight","ctx","getContext","lineCap","clearRect","command","fillStyle","fill","fillRect","beginPath","moveTo","lineTo","lineWidth","pensize","strokeStyle","stroke","font","textAlign","anchor","fillText","text","prevProps","prevState","countLines","displayValue","displayDiv","progressBar","outputHeaders","outputSection","resetButton","sourceLineCount","onClick","outputLineCount","goalLineCount","outputSize","Math","min","max","contextType","App","app","tutorials","pythonMessage","languagePluginLoader","then","pyodide","loadPackage","runPython","search","location","tutorialName","URLSearchParams","Provider","renderers","code","link","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8NAEA,SAASA,EAAeC,GACpB,GAAKA,EAAMC,WAAW,MAAQD,EAAME,SAAS,MACxCF,EAAMC,WAAW,MAAQD,EAAME,SAAS,KAAO,CAChDF,EAAQA,EAAMG,UAAU,EAAGH,EAAMI,OAAS,GAC1C,IAAIC,EAAW,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAMI,OAAQE,IAAK,CACnC,MAAMC,EAAIP,EAAMM,GAChB,GAAU,OAANC,GAAcD,IAAMN,EAAMI,OAAS,EACnCC,GAAYE,MACT,CACH,MAAMC,EAAKR,IAAQM,GACnB,OAAQE,GACJ,IAAK,KACDH,GAAY,KACZ,MACJ,IAAK,IACDA,GAAY,IACZ,MACJ,IAAK,IACDA,GAAY,KACZ,MACJ,IAAK,IACDA,GAAY,KACZ,MACJ,IAAK,IACDA,GAAY,KACZ,MACJ,IAAK,IACD,GAAIC,EAAE,EAAIN,EAAMI,OAChB,CACI,MAAMK,EAAWC,SACbV,EAAMG,UAAUG,EAAE,EAAGA,EAAE,GACvB,IACJD,GAAYM,OAAOC,aAAaH,GAChCH,GAAK,EACL,MAEJD,GAAYE,EACZF,GAAYG,EACZ,MACJ,QACIH,GAAYE,EACZF,GAAYG,IAK5BR,EAAQK,OACDL,EAAMa,MAAM,eACnBb,EAAQc,WAAWd,IAEvB,OAAOA,EAGI,MAAMe,EAEjBC,YAAYC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACR,QAAuBC,IAAnBJ,EACAK,KAAKR,WAAaA,EAClBQ,KAAKL,eAAiBA,EACtBK,KAAKJ,QAAS,EACdI,KAAKH,SAAWA,OACb,IAAe,IAAXD,EACPI,KAAKR,WAAaA,EAClBQ,KAAKJ,OAASA,EACdI,KAAKH,UAAW,OACb,QAAiBE,IAAbF,EACPG,KAAKR,WAAaA,EAClBQ,KAAKJ,OAASA,EACdI,KAAKH,SAAWA,MACb,CACH,IAAII,EACA,4DAA4DC,KACxDV,GACR,GAAqB,OAAjBS,EACAD,KAAKR,YAAcS,EAAa,IAAM,IAAMA,EAAa,GACzDD,KAAKJ,OAA2C,WAAlCK,EAAa,GAAGE,cAC9BH,KAAKH,SAA6C,WAAlCI,EAAa,GAAGE,mBAC7B,GAAI,MAAMC,KAAKZ,GAClBQ,KAAKR,WAAaA,EAClBQ,KAAKJ,QAAS,EACdI,KAAKH,UAAW,MACb,CACHG,KAAKJ,QAAS,EACdI,KAAKH,UAAW,EAChB,IAAIQ,EAAcb,EAAWc,MAAM,uBACnCN,KAAKR,WAAaa,EAAY,GAC9BL,KAAKL,eAAiBU,EAAY,IAG1C,QAAYN,IAARN,GAAqBO,KAAKJ,OAAQ,CAC3BI,KAAKH,cAEcE,IAAfD,IACPA,EAAa,CAAC,IAAK,MAFnBA,OAAaC,EAIjB,IAAIQ,EAASd,EAAIO,KAAKR,WAAYM,GAIlC,GAHAE,KAAKQ,QAAUD,EAAOE,IAAI,GAC1BT,KAAKU,OAASH,EAAOE,IAAI,GAErBT,KAAKH,SAAU,CACf,MAAMc,EAAeX,KAAKQ,QAAQF,MAC9B,wCAGJ,IAAIM,EACJ,IAHAD,EAAaE,QACbb,KAAKc,eAAiB,GAEfH,EAAahC,QAAQ,CACxB,MAAMoC,EAAWJ,EAAaE,QAC9B,GAAiB,MAAbE,EACA,MAEJ,GAAOA,EAASvC,WAAW,QAKpB,CACH,MAAMwC,EAAWD,EAASE,QAAQ,KAClC,IAAkB,IAAdD,EACAJ,EAAeM,OAAOC,KAAKlC,SAAS8B,QACjC,CACH,MAAMK,EAAYL,EAASrC,UAAU,EAAGsC,GACpCK,EAAaN,EAASrC,UAAUsC,EAAS,GAC7C,GAAkB,SAAdI,EACAR,EAAeQ,GAAa9C,EACxB+C,OACD,CACH,MAAMC,EAAYD,EAAWjC,MACzB,mCACJ,IAAImC,EAAW,QACXC,EAAW,EACXC,EAAa,cACC1B,IAAduB,IACAC,EAAWD,EAAU,GACrBE,EAAWF,EAAU,GACrBG,EAAaH,EAAU,IAE3BV,EAAeQ,GAAf,UACOK,EADP,YACqBD,EADrB,cACmCD,eA1BpBxB,IAAnBa,GACAZ,KAAKc,eAAeK,KAAKP,GAE7BA,EAAiB,CAACc,KAAMX,EAAUG,OAAQ,IA4BlDlB,KAAKQ,QAAUG,EAAagB,KAAK,MAErC,QAAmB5B,IAAfL,EACAM,KAAKN,WAAaA,OACf,QAA4BK,IAAxBC,KAAKL,eAA8B,CAC1C,IAAIiC,EAAanC,EAAIO,KAAKL,gBAC1BK,KAAKN,WAAakC,EAAWnB,IAAI,GAErC,QAAwBV,IAApBC,KAAKN,WAA0B,CAC/B,IAAImC,EAAQC,oBAAU9B,KAAKN,WAAYM,KAAKU,QACxCqB,EAAiB,EACjBC,EAAmB,EACnBC,EAAmB,EACnBC,EAAqB,EACrBC,EAAa,EACbC,EAAgB,EAChBC,EAAaR,EAAMS,KAAIC,IACnB,IAAIC,GAAaD,EAAKhE,MAAMa,MAAM,QAAU,IAAIT,OAC5C8D,EAAeV,EAAiBS,EAChCE,EAAiBV,EAAmBO,EAAKhE,MAAMI,OAC/CgE,EAAiBV,EAAmBO,EACpCI,EAAmBV,EAAqBK,EAAKhE,MAAMI,OACnD4D,EAAKM,OAASN,EAAKO,QACnBV,GAAiBG,EAAKhE,MAAMI,OAE5BwD,GAAc,EAAEI,EAAKhE,MAAMI,OAE/B,IAAIoE,EAAS,CACTC,SAAUjB,EACVkB,SAAUjB,EACVkB,OAAQT,EACRU,OAAQT,EACRU,UAAW,wBACXC,KAAM,OACNR,MAAON,EAAKM,MACZC,QAASP,EAAKO,SAQlB,GANOP,EAAKO,UACRC,EAAOC,SAAWf,EAClBc,EAAOE,SAAWf,EAClBa,EAAOG,OAASP,EAChBI,EAAOI,OAASP,GAEhBJ,EAAY,EAAG,CACf,IAAIc,EAAcf,EAAKhE,MAAMgF,YAAY,MACzCR,EAAOI,OAASZ,EAAKhE,MAAMI,OAAS2E,EAAc,EAClDZ,EAAiBE,EAAmBG,EAAOI,OAU/C,OAROZ,EAAKM,QACRd,EAAiBU,EACjBT,EAAmBU,GAEhBH,EAAKO,UACRb,EAAmBU,EACnBT,EAAqBU,GAElBG,KAEf/C,KAAKwD,YAAcnB,EAAWoB,QAAOV,GAAUA,EAAOD,UACtD9C,KAAK0D,cAAgBrB,EAAWoB,QAAOV,GAAUA,EAAOF,QACxDR,EAAWsB,SAAQZ,WACRA,EAAOF,aACPE,EAAOD,WAElB9C,KAAK4D,gBACDzB,GAAcA,EAAaC,GADR,O,iDC5MvC,MAAMyB,EAAgBC,IAAMC,cAAc,wBAE1C,MAAMC,UAAoBC,YACtBC,SACI,IAAIC,EAAcnE,KAAKoE,MAAMC,WAAa,GACtC,SACCrE,KAAKoE,MAAMC,WAAa,IACrB,UACA,UACR,OAAO,qBAAKjB,UAAU,uBAAf,SACH,qBAAKA,UAAW,sBAAwBe,EACnCG,MAAO,CAACC,MAAM,GAAD,OAAKvE,KAAKoE,MAAMC,WAAhB,WAK9B,MAAMG,UAAeP,YACjB1E,YAAY6E,GACRK,MAAML,GACNpE,KAAK0E,MAAQ,CAACC,kBAAc5E,GAC5BC,KAAK4E,QAAUd,IAAMe,YACrB7E,KAAK8E,aAAe9E,KAAK8E,aAAaC,KAAK/E,MAG/C8E,eACI9E,KAAKoE,MAAMY,SAAShF,KAAK4E,QAAQK,QAAQC,OAAOC,QAAQC,gBAG5DC,qBACIrF,KAAK4E,QAAQK,QAAQC,OAAOC,QAAQG,aAAatF,KAAKoE,MAAMmB,WACxDvF,KAAKoE,MAAMO,eAAiB3E,KAAK0E,MAAMC,eACvC3E,KAAKwF,SAAS,CAACb,aAAc3E,KAAKoE,MAAMO,eACxC3E,KAAK4E,QAAQK,QAAQC,OAAOO,SAASzF,KAAKoE,MAAMO,aAAa,IAEjE3E,KAAK4E,QAAQK,QAAQC,OAAOQ,SAGhCxB,SACI,OAAO,cAAC,IAAD,CACHyB,IAAK3F,KAAK4E,QACVrG,MAAOyB,KAAKoE,MAAM7F,MAClBqH,SAAU5F,KAAKoE,MAAMwB,SACrBC,SAAU7F,KAAKoE,MAAMyB,SACrBb,SAAUhF,KAAK8E,aACfgB,kBAAmB9F,KAAKoE,MAAM0B,kBAC9BC,eAAgB/F,KAAKoE,MAAM2B,eAC3BC,KAAMhG,KAAKoE,MAAM4B,KACjBC,MAAM,SACN1B,MAAM,OACN2B,OAAO,OACP1E,SAAU,GACV2E,iBAAiB,EACjBC,QAASpG,KAAKoE,MAAMgC,QACpBC,YAAY,EACZC,oBAAqBtG,KAAKoE,MAAMkC,oBAChCC,YAAa,CACTC,gBAAiBC,KAErBC,WAAY,CACRC,iBAAiB,EACjBC,QAAS,MAKzB,MAAMC,UAAwB5C,YAC1BC,SACI,IAAI4C,EAAY,CAACC,KAAM/G,KAAKoE,MAAM2C,MAC9B/G,KAAKoE,MAAM,oBACX0C,EAAU,kBAAoB9G,KAAKoE,MAAM,mBAE7C,IAAIhF,EAAQ,oBAAoBc,KAAK4G,EAAUC,MAS/C,OARc,OAAV3H,EACA0H,EAAUpF,KAAOtC,EAAM,GAAK,OAE5BA,EAAQ,uBAAuBc,KAAK4G,EAAUC,MAChC,OAAV3H,IACA0H,EAAUpF,KAAOtC,EAAM,KAGxB0E,IAAMkD,cAAc,IAAKF,EAAW9G,KAAKoE,MAAM6C,WAI9D,MAAMC,UAAmBjD,YAGrB1E,YAAY6E,GACRK,MAAML,GADS,KA0EnB+C,aAAe,KACPnH,KAAK0E,MAAM7E,UACXG,KAAKoH,gBA1ET,IAAIC,EAA8B,OAAjBrH,KAAKsH,QAAmBC,OAAOC,aAAUzH,EACtD0H,EAAU,IAAInI,EAAc8E,EAAM7F,MAAO8I,GAC7CrH,KAAK0E,MAAQ,CACTa,UAAW,EACXZ,kBAAc5E,EACd2H,gBAAgB,EAChBC,OAAQF,EAAQjI,WAChBoI,eAAgBH,EAAQjI,WACxBG,eAAgB8H,EAAQ9H,eACxBa,QAASiH,EAAQjH,QACjBd,WAAY+H,EAAQ/H,WACpBgB,OAAQ+G,EAAQ/G,OAChB8C,YAAaiE,EAAQjE,YACrBE,cAAe+D,EAAQ/D,cACvBE,gBAAiB6D,EAAQ7D,gBACzBhE,OAAQ6H,EAAQ7H,OAChBC,SAAU4H,EAAQ5H,SAClBiB,eAAgB2G,EAAQ3G,gBAG5Bd,KAAKoH,aAAepH,KAAKoH,aAAarC,KAAK/E,MAC3CA,KAAK6H,YAAc7H,KAAK6H,YAAY9C,KAAK/E,MACzCA,KAAK8E,aAAe9E,KAAK8E,aAAaC,KAAK/E,MAC3CA,KAAK8H,mBAAqB9H,KAAK8H,mBAAmB/C,KAAK/E,MAEvDA,KAAK+H,UAAYjE,IAAMe,YACvB7E,KAAKgI,UAAYlE,IAAMe,YAG3BuC,aAAaa,QACSlI,IAAdkI,IACAA,EAAYjI,KAAK0E,MAAMiD,QAE3B,IAAIN,EAA8B,OAAjBrH,KAAKsH,QAAmBC,OAAOC,aAAUzH,EACtDmI,EAASlI,KAAKgI,UAAU/C,QACxBnF,EAAwB,OAAXoI,OACPnI,EACA,CAACmI,EAAO3D,MAAO2D,EAAOhC,QAC5BuB,EAAU,IAAInI,EACV2I,EACAZ,EACArH,KAAK0E,MAAMhF,WACXM,KAAK0E,MAAM/E,eACXK,KAAK0E,MAAM9E,OACXI,KAAK0E,MAAM7E,SACXC,GAERE,KAAKwF,SAAS,CACVmC,OAAQM,EACRzH,QAASiH,EAAQjH,QACjBE,OAAQ+G,EAAQ/G,OAChBhB,WAAY+H,EAAQ/H,WACpB8D,YAAaiE,EAAQjE,YACrBE,cAAe+D,EAAQ/D,cACvBE,gBAAiB6D,EAAQ7D,gBACzB9C,eAAgB2G,EAAQ3G,iBAE5Bd,KAAKmI,WAAWV,EAAQ3G,gBAG5B+G,cACI7H,KAAKoH,aAAapH,KAAK0E,MAAMkD,gBAGjC9C,aAAaS,GACTvF,KAAKwF,SAAS,CAACD,UAAWA,IAG9BuC,mBAAmBM,GACfpI,KAAKwF,SAAS,CAACb,aAAcyD,EAAUC,mBAAmBC,MAS9DC,oBACIhB,OAAOiB,iBAAiB,SAAUxI,KAAKmH,cACvCnH,KAAKmI,WAAWnI,KAAK0E,MAAM5D,gBAG/B2H,uBACIlB,OAAOmB,oBAAoB,SAAU1I,KAAKmH,cAG9CgB,WAAWQ,GACP,MAAMT,EAASlI,KAAKgI,UAAU/C,QAC9B,GAAgB,OAAXiD,QAAkCnI,IAAb4I,EACtB,OAEJT,EAAO3D,MAAQvE,KAAK+H,UAAU9C,QAAQ2D,YACtCV,EAAOhC,OAASlG,KAAK+H,UAAU9C,QAAQ4D,aACvC,MAAMC,EAAMZ,EAAOa,WAAW,MAC9BD,EAAIE,QAAU,QACdF,EAAIG,UAAU,EAAG,EAAGf,EAAO3D,MAAO2D,EAAOhC,QACzC,IAAK,MAAMgD,KAAWP,EAIhB,GAHmB,YAAjBO,EAAQxH,OACRoH,EAAIK,UAAYD,EAAQE,KACxBN,EAAIO,SAAS,EAAG,EAAGnB,EAAO3D,MAAO2D,EAAOhC,SACrB,gBAAjBgD,EAAQxH,KACVoH,EAAIQ,YACJR,EAAIS,OAAOL,EAAQhI,OAAO,GAAIgI,EAAQhI,OAAO,IAC7C4H,EAAIU,OAAON,EAAQhI,OAAO,GAAIgI,EAAQhI,OAAO,IAC7C4H,EAAIW,UAAYP,EAAQQ,QACxBZ,EAAIa,YAAcT,EAAQE,KAC1BN,EAAIc,cAEH,GAAqB,mBAAjBV,EAAQxH,KAA2B,CACxCoH,EAAIQ,YACJR,EAAIS,OAAOL,EAAQhI,OAAO,GAAIgI,EAAQhI,OAAO,IAC7C,IAAK,IAAIrC,EAAI,EAAGA,EAAIqK,EAAQhI,OAAOvC,OAAQE,GAAK,EAC5CiK,EAAIU,OAAON,EAAQhI,OAAOrC,GAAIqK,EAAQhI,OAAOrC,EAAE,IAEnDiK,EAAIK,UAAYD,EAAQE,KACxBN,EAAIM,KAAK,eAEa,gBAAjBF,EAAQxH,OACboH,EAAIe,KAAOX,EAAQW,KACnBf,EAAIK,UAAYD,EAAQE,KACxBN,EAAIgB,UAA+B,OAAnBZ,EAAQa,OAClB,OACmB,OAAnBb,EAAQa,OACR,QACA,SACNjB,EAAIkB,SAASd,EAAQe,KAAMf,EAAQhI,OAAO,GAAIgI,EAAQhI,OAAO,KAKzEmE,mBAAmB6E,EAAWC,GACL,OAAjBnK,KAAKsH,QACDtH,KAAKsH,UAAYtH,KAAK0E,MAAMlE,SAC5BR,KAAKwF,SAAS,CAAChF,QAASR,KAAKsH,UAGzBtH,KAAK0E,MAAMgD,iBACnB1H,KAAKoH,eACLpH,KAAKwF,SAAS,CAACkC,gBAAgB,KAIvC0C,WAAWH,GACP,OAAOA,EAAK3J,MAAM,cAAc3B,OAGpCuF,SACI,IAAImG,EAAerK,KAAKsH,QACH,OAAjB+C,IACAA,EAAerK,KAAK0E,MAAMlE,SAE9B,IAAI8J,EAAa,KACbC,EAAc,KACdC,EAAgB,KAChBC,EAAgB,KAChBC,EAAc,KACdC,EAAkB,EAAI3K,KAAKoK,WAAWpK,KAAK0E,MAAMiD,QAyBrD,GAxBI3H,KAAK0E,MAAM9E,SAEP0K,EADAtK,KAAK0E,MAAM7E,SACE,wBACT8F,IAAK3F,KAAKgI,UACV9B,OAAwB,GAAhByE,IAEC,qBAAKvH,UAAU,cAAf,SACT,cAAC,EAAD,CACI7E,MAAO8L,EACP9E,UAAWvF,KAAK0E,MAAMa,UACtBM,UAAU,EACVlB,aAAc3E,KAAK0E,MAAMC,aACzBiB,SAAU5F,KAAKoH,aACfpC,SAAUhF,KAAK8E,aACfwB,qBAAqB,EACrBN,KAAK,YAIjBhG,KAAK0E,MAAMiD,SAAW3H,KAAK0E,MAAMkD,iBACjC8C,EAAc,qBAAKtH,UAAU,gBAAf,SACV,wBAAQA,UAAU,aAAawH,QAAS5K,KAAK6H,YAA7C,2BAGsB9H,IAA1BC,KAAK0E,MAAMhF,WAA0B,CACrC,IAAImL,EAAkB7K,KAAKoK,WAAWpK,KAAK0E,MAAMhE,QAC7CoK,EAAgB9K,KAAKoK,WAAWpK,KAAK0E,MAAMhF,YAC3CqL,EAAaC,KAAKC,IACd,GAAI,EAAID,KAAKE,IAAIL,EAAiBC,IAC1CP,EAAc,cAAC,EAAD,CAAalG,WAAYrE,KAAK0E,MAAMd,kBAClD4G,EAAgB,sBAAKpH,UAAU,iBAAf,UACZ,oBAAIA,UAAU,gBAAd,yBACA,oBAAIA,UAAU,gBAAd,4BAEJqH,EAAgB,sBAAKrH,UAAU,iBAAf,UACZ,qBAAKA,UAAU,cACVkB,MAAO,CAAC4B,OAAmB,GAAX6E,EAAgB,MADrC,SAEI,cAAC,EAAD,CACIxM,MAAOyB,KAAK0E,MAAMhF,WAClB0G,QAASpG,KAAK0E,MAAMlB,YACpBqC,UAAU,EACVS,qBAAqB,EACrBN,KAAK,WAEb,qBAAK5C,UAAU,cAAf,SACI,cAAC,EAAD,CACI7E,MAAOyB,KAAK0E,MAAMhE,OAClB0F,QAASpG,KAAK0E,MAAMhB,cACpBmC,UAAU,EACVS,qBAAqB,EACrBN,KAAK,cAIrB,OACI,sBAAK5C,UAAU,aAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,qBAAKA,UAAU,cACXuC,IAAK3F,KAAK+H,UACVzD,MAAO,CAAC4B,OAAwB,GAAhByE,EAAqB,MAFzC,SAGI,cAAC,EAAD,CACIpM,MAAOyB,KAAK0E,MAAMiD,OAClBpC,UAAWvF,KAAK0E,MAAMa,UACtBK,SAAU5F,KAAKoH,aACfpC,SAAUhF,KAAK8E,aACfiB,eAAgB/F,KAAK8H,mBACrBxB,qBAAqB,EACrBN,KAAK,aAEZsE,KAEJI,EACAH,EACAC,EACAC,MA7OXvD,EACKiE,YAActH,EAkPzB,MAAMuH,UAAYnH,YACd1E,YAAY6E,GACRK,MAAML,GACN,IAAIiH,EAAMrL,KACVA,KAAK0E,MAAQ,CACTiD,OAAQ2D,EAAS,MACjBC,cAAe,0BAIiBxL,IAAhCwH,OAAOiE,qBACPxL,KAAK0E,MAAM6G,cAAgB,wBAG3BhE,OAAOiE,qBAAqBC,MAAK,WAE7BlE,OAAOmE,QAAQC,YAAY,gBAAgBF,MAAK,KAE5ClE,OAAOmE,QAAQE,UACX,sDACJP,EAAI7F,SAAS,CAAC+F,cAAe,aAIzC,IAAIM,EAAStE,OAAOuE,SAASD,OAEzBE,EADS,IAAIC,gBAAgBH,GACPpL,IAAI,YAC1BsL,IACA/L,KAAK0E,MAAMiD,OAAS2D,EAAUS,QACJhM,IAAtBC,KAAK0E,MAAMiD,SACX3H,KAAK0E,MAAMiD,OAAS,uBAAyBoE,IAKzD7H,SACI,OACI,qBAAKd,UAAU,MAAf,SACI,cAACS,EAAcoI,SAAf,CAAwB1N,MAAOyB,KAAK0E,MAAM6G,cAA1C,SACI,cAAC,IAAD,CACI5D,OAAQ3H,KAAK0E,MAAMiD,OACnBuE,UAAW,CACPC,KAAMjF,EACNkF,KAAMvF,UAQnBuE,QCzXKiB,QACW,cAA7B9E,OAAOuE,SAASQ,UAEe,UAA7B/E,OAAOuE,SAASQ,UAEhB/E,OAAOuE,SAASQ,SAASlN,MACvB,2DCZNmN,IAASrI,OAAO,cAAC,EAAD,IAASsI,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAKoB,IACjCA,EAAaC,iB","file":"static/js/main.25c09a53.chunk.js","sourcesContent":["import { diffChars } from 'diff';\n\nfunction unescapeString(value) {\n    if ((value.startsWith(\"'\") && value.endsWith(\"'\")) ||\n        (value.startsWith('\"') && value.endsWith('\"'))) {\n        value = value.substring(1, value.length - 1);\n        let newValue = '';\n        for (let i = 0; i < value.length; i++) {\n            const c = value[i];\n            if (c !== '\\\\' || i === value.length - 1) {\n                newValue += c;\n            } else {\n                const c2 = value[++i];\n                switch (c2) {\n                    case '\\\\':\n                        newValue += '\\\\';\n                        break;\n                    case '\\'':\n                        newValue += '\\'';\n                        break;\n                    case 'n':\n                        newValue += '\\n';\n                        break;\n                    case 'r':\n                        newValue += '\\r';\n                        break;\n                    case 't':\n                        newValue += '\\t';\n                        break;\n                    case 'x':\n                        if (i+2 < value.length)\n                        {\n                            const charCode = parseInt(\n                                value.substring(i+1, i+3),\n                                16);\n                            newValue += String.fromCharCode(charCode);\n                            i += 2;\n                            break;\n                        }\n                        newValue += c;\n                        newValue += c2;\n                        break;\n                    default:\n                        newValue += c;\n                        newValue += c2;\n                        break;\n                }\n            }\n        }\n        value = newValue;\n    } else if (value.match(/^[0-9.]+$/)) {\n        value = parseFloat(value);\n    }\n    return value;\n}\n\nexport default class SampleAnalyst {\n\n    constructor(sourceCode,\n                run,\n                goalOutput,\n                goalSourceCode,\n                isLive,\n                isCanvas,\n                canvasSize) {\n        if (goalSourceCode !== undefined) {\n            this.sourceCode = sourceCode;\n            this.goalSourceCode = goalSourceCode;\n            this.isLive = true;\n            this.isCanvas = isCanvas;\n        } else if (isLive === false) {\n            this.sourceCode = sourceCode;\n            this.isLive = isLive;\n            this.isCanvas = false;\n        } else if (isCanvas !== undefined) {\n            this.sourceCode = sourceCode;\n            this.isLive = isLive;\n            this.isCanvas = isCanvas;\n        } else {\n            let sourcePieces =\n                /^(.*\\n)?( *##+ *((static)|(live)|(canvas))[ #]*\\n)(.*)$/is.exec(\n                    sourceCode);\n            if (sourcePieces !== null) {\n                this.sourceCode = (sourcePieces[1] || \"\") + sourcePieces[7];\n                this.isLive = sourcePieces[3].toLowerCase() !== \"static\";\n                this.isCanvas = sourcePieces[3].toLowerCase() === \"canvas\";\n            } else if (/>>>/.test(sourceCode)) {\n                this.sourceCode = sourceCode;\n                this.isLive = false;\n                this.isCanvas = false;\n            } else {\n                this.isLive = true;\n                this.isCanvas = false;\n                let splitSource = sourceCode.split(/ *##+ *Goal[ #]*\\n/i);\n                this.sourceCode = splitSource[0];\n                this.goalSourceCode = splitSource[1];\n            }\n        }\n        if (run !== undefined && this.isLive) {\n            if ( ! this.isCanvas) {\n                canvasSize = undefined;\n            } else if (canvasSize === undefined) {\n                canvasSize = [300, 150];\n            }\n            let result = run(this.sourceCode, canvasSize);\n            this.display = result.get(0);\n            this.output = result.get(1);\n\n            if (this.isCanvas) {\n                const displayLines = this.display.split(\n                    /\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/);\n                displayLines.shift();  // start_canvas\n                this.canvasCommands = [];\n                let currentCommand = undefined;\n                while (displayLines.length) {\n                    const nextLine = displayLines.shift();\n                    if (nextLine === '.') {\n                        break;\n                    }\n                    if ( ! nextLine.startsWith('    ')) {\n                        if (currentCommand !== undefined) {\n                            this.canvasCommands.push(currentCommand);\n                        }\n                        currentCommand = {name: nextLine, coords: []};\n                    } else {\n                        const position = nextLine.indexOf('=');\n                        if (position === -1) {\n                            currentCommand.coords.push(parseInt(nextLine));\n                        } else {\n                            const fieldName = nextLine.substring(4, position),\n                                fieldValue = nextLine.substring(position+1);\n                            if (fieldName !== 'font') {\n                                currentCommand[fieldName] = unescapeString(\n                                    fieldValue);\n                            } else {\n                                const fontMatch = fieldValue.match(\n                                    /\\('([^']*)', (\\d+), '([^']*)'\\)/);\n                                let fontName = 'Arial',\n                                    fontSize = 8,\n                                    styleNames = 'normal';\n                                if (fontMatch !== undefined) {\n                                    fontName = fontMatch[1];\n                                    fontSize = fontMatch[2];\n                                    styleNames = fontMatch[3];\n                                }\n                                currentCommand[fieldName] = (\n                                    `${styleNames} ${fontSize}px ${fontName}`);\n                            }\n                        }\n                    }\n                }\n                this.display = displayLines.join('\\n');\n            }\n            if (goalOutput !== undefined) {\n                this.goalOutput = goalOutput;\n            } else if (this.goalSourceCode !== undefined) {\n                let goalResult = run(this.goalSourceCode);\n                this.goalOutput = goalResult.get(1);\n            }\n            if (this.goalOutput !== undefined) {\n                let diffs = diffChars(this.goalOutput, this.output),\n                    goalLineNumber = 0,\n                    goalColumnNumber = 0,\n                    outputLineNumber = 0,\n                    outputColumnNumber = 0,\n                    matchCount = 0,\n                    mismatchCount = 0,\n                    allMarkers = diffs.map(diff => {\n                        let lineCount = (diff.value.match(/\\n/g) || '').length,\n                            lastGoalLine = goalLineNumber + lineCount,\n                            lastGoalColumn = goalColumnNumber + diff.value.length,\n                            lastOutputLine = outputLineNumber + lineCount,\n                            lastOutputColumn = outputColumnNumber + diff.value.length;\n                        if (diff.added || diff.removed) {\n                            mismatchCount += diff.value.length;\n                        } else {\n                            matchCount += 2*diff.value.length;\n                        }\n                        let marker = {\n                            startRow: goalLineNumber,\n                            startCol: goalColumnNumber,\n                            endRow: lastGoalLine,\n                            endCol: lastGoalColumn,\n                            className: \"change-marker warning\",\n                            type: \"text\",\n                            added: diff.added,\n                            removed: diff.removed\n                        };\n                        if ( ! diff.removed) {\n                            marker.startRow = outputLineNumber;\n                            marker.startCol = outputColumnNumber;\n                            marker.endRow = lastOutputLine;\n                            marker.endCol = lastOutputColumn;\n                        }\n                        if (lineCount > 0) {\n                            let lastNewLine = diff.value.lastIndexOf('\\n');\n                            marker.endCol = diff.value.length - lastNewLine - 1;\n                            lastGoalColumn = lastOutputColumn = marker.endCol;\n                        }\n                        if ( ! diff.added) {\n                            goalLineNumber = lastGoalLine;\n                            goalColumnNumber = lastGoalColumn;\n                        }\n                        if ( ! diff.removed) {\n                            outputLineNumber = lastOutputLine;\n                            outputColumnNumber = lastOutputColumn;\n                        }\n                        return marker;\n                    });\n                this.goalMarkers = allMarkers.filter(marker => marker.removed);\n                this.outputMarkers = allMarkers.filter(marker => marker.added);\n                allMarkers.forEach(marker => {\n                    delete marker.added;\n                    delete marker.removed;\n                });\n                this.matchPercentage = 100 * (\n                    matchCount / (matchCount + mismatchCount));\n            }\n        }\n    }\n}\n","import React, {Component} from 'react';\nimport AceEditor from 'react-ace';\nimport ReactMarkdown from 'react-markdown';\nimport SampleAnalyst from './SampleAnalyst.js';\nimport './App.css';\nimport tutorials from './tutorials.json';\n\nimport 'ace-builds/src-noconflict/mode-python';\nimport 'ace-builds/src-noconflict/mode-markdown';\nimport 'ace-builds/src-noconflict/theme-github';\n\nconst PythonContext = React.createContext('Python is loading...');\n\nclass ProgressBar extends Component {\n    render() {\n        let stateClass = (this.props.percentage < 50) ?\n            \"danger\" :\n            (this.props.percentage < 100) ?\n                \"warning\" :\n                \"success\";\n        return <div className=\"progressbar-wrapper \">\n            <div className={\"progressbar-filler \" + stateClass}\n                 style={{width: `${this.props.percentage}%`}}/>\n        </div>;\n    }\n}\n\nclass Editor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {selectedLine: undefined};\n        this.content = React.createRef();\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    handleScroll() {\n        this.props.onScroll(this.content.current.editor.session.getScrollTop());\n    }\n\n    componentDidUpdate() {\n        this.content.current.editor.session.setScrollTop(this.props.scrollTop);\n        if (this.props.selectedLine !== this.state.selectedLine) {\n            this.setState({selectedLine: this.props.selectedLine});\n            this.content.current.editor.gotoLine(this.props.selectedLine+1);\n        }\n        this.content.current.editor.resize();\n    }\n\n    render() {\n        return <AceEditor\n            ref={this.content}\n            value={this.props.value}\n            onChange={this.props.onChange}\n            readOnly={this.props.readOnly}\n            onScroll={this.handleScroll}\n            onSelectionChange={this.props.onSelectionChange}\n            onCursorChange={this.props.onCursorChange}\n            mode={this.props.mode}\n            theme=\"github\"\n            width=\"100%\"\n            height=\"100%\"\n            fontSize={18}\n            showPrintMargin={true}\n            markers={this.props.markers}\n            showGutter={true}\n            highlightActiveLine={this.props.highlightActiveLine}\n            editorProps={{\n                $blockScrolling: Infinity\n            }}\n            setOptions={{\n                showLineNumbers: true,\n                tabSize: 4,\n            }}/>;\n    }\n}\n\nclass FootnoteBuilder extends Component {\n    render() {\n        let coreProps = {href: this.props.href};\n        if (this.props['data-sourcepos']) {\n            coreProps['data-sourcepos'] = this.props['data-sourcepos'];\n        }\n        let match = /^#(footnote\\d+)$/i.exec(coreProps.href);\n        if (match !== null) {\n            coreProps.name = match[1] + \"ref\";\n        } else {\n            match = /^#(footnote\\d+)ref$/i.exec(coreProps.href);\n            if (match !== null) {\n                coreProps.name = match[1];\n            }\n        }\n        return React.createElement('a', coreProps, this.props.children);\n    }\n}\n\nclass CodeSample extends Component {\n    static contextType = PythonContext;\n\n    constructor(props) {\n        super(props);\n        let codeRunner = this.context === null ? window.analyze : undefined,\n            analyst = new SampleAnalyst(props.value, codeRunner);\n        this.state = {\n            scrollTop: 0,\n            selectedLine: undefined,\n            isPythonLoaded: false,\n            source: analyst.sourceCode,\n            originalSource: analyst.sourceCode,\n            goalSourceCode: analyst.goalSourceCode,\n            display: analyst.display,\n            goalOutput: analyst.goalOutput,\n            output: analyst.output,\n            goalMarkers: analyst.goalMarkers,\n            outputMarkers: analyst.outputMarkers,\n            matchPercentage: analyst.matchPercentage,\n            isLive: analyst.isLive,\n            isCanvas: analyst.isCanvas,\n            canvasCommands: analyst.canvasCommands\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleCursorChange = this.handleCursorChange.bind(this);\n\n        this.editorRef = React.createRef();\n        this.canvasRef = React.createRef();\n    }\n\n    handleChange(newSource) {\n        if (newSource === undefined) {\n            newSource = this.state.source;\n        }\n        let codeRunner = this.context === null ? window.analyze : undefined,\n            canvas = this.canvasRef.current,\n            canvasSize = canvas === null\n                ? undefined\n                : [canvas.width, canvas.height],\n            analyst = new SampleAnalyst(\n                newSource,\n                codeRunner,\n                this.state.goalOutput,\n                this.state.goalSourceCode,\n                this.state.isLive,\n                this.state.isCanvas,\n                canvasSize\n            );\n        this.setState({\n            source: newSource,\n            display: analyst.display,\n            output: analyst.output,\n            goalOutput: analyst.goalOutput,\n            goalMarkers: analyst.goalMarkers,\n            outputMarkers: analyst.outputMarkers,\n            matchPercentage: analyst.matchPercentage,\n            canvasCommands: analyst.canvasCommands\n        });\n        this.drawCanvas(analyst.canvasCommands);\n    }\n\n    handleReset() {\n        this.handleChange(this.state.originalSource);\n    }\n\n    handleScroll(scrollTop) {\n        this.setState({scrollTop: scrollTop});\n    }\n\n    handleCursorChange(selection) {\n        this.setState({selectedLine: selection.getSelectionLead().row});\n    }\n\n    handleResize = () => {\n        if (this.state.isCanvas) {\n            this.handleChange();\n        }\n    };\n\n    componentDidMount() {\n        window.addEventListener('resize', this.handleResize);\n        this.drawCanvas(this.state.canvasCommands);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    drawCanvas(commands) {\n        const canvas = this.canvasRef.current;\n        if ((canvas === null) || (commands === undefined)) {\n            return;\n        }\n        canvas.width = this.editorRef.current.clientWidth;\n        canvas.height = this.editorRef.current.clientHeight;\n        const ctx = canvas.getContext('2d');\n        ctx.lineCap = 'round';\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        for (const command of commands) {\n            if (command.name === 'bgcolor') {\n                ctx.fillStyle = command.fill;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            } if (command.name === 'create_line') {\n                ctx.beginPath();\n                ctx.moveTo(command.coords[0], command.coords[1]);\n                ctx.lineTo(command.coords[2], command.coords[3]);\n                ctx.lineWidth = command.pensize;\n                ctx.strokeStyle = command.fill;\n                ctx.stroke();\n            }\n            else if (command.name === 'create_polygon') {\n                ctx.beginPath();\n                ctx.moveTo(command.coords[0], command.coords[1]);\n                for (let i = 2; i < command.coords.length; i += 2) {\n                    ctx.lineTo(command.coords[i], command.coords[i+1]);\n                }\n                ctx.fillStyle = command.fill;\n                ctx.fill('evenodd');\n            }\n            else if (command.name === 'create_text') {\n                ctx.font = command.font;\n                ctx.fillStyle = command.fill;\n                ctx.textAlign = command.anchor === 'sw'\n                    ? 'left'\n                    : command.anchor === 'se'\n                    ? 'right'\n                    : 'center';\n                ctx.fillText(command.text, command.coords[0], command.coords[1]);\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.context !== null) {\n            if (this.context !== this.state.display) {\n                this.setState({display: this.context});\n            }\n        }\n        else if ( ! this.state.isPythonLoaded) {\n            this.handleChange();\n            this.setState({isPythonLoaded: true});\n        }\n    }\n\n    countLines(text) {\n        return text.split(/\\r\\n|\\r|\\n/).length;\n    }\n\n    render() {\n        let displayValue = this.context;\n        if (displayValue === null) {\n            displayValue = this.state.display;\n        }\n        let displayDiv = null,\n            progressBar = null,\n            outputHeaders = null,\n            outputSection = null,\n            resetButton = null,\n            sourceLineCount = 1 + this.countLines(this.state.source);\n        if (this.state.isLive) {\n            if (this.state.isCanvas) {\n                displayDiv = <canvas\n                    ref={this.canvasRef}\n                    height={sourceLineCount*18}/>;\n            } else {\n                displayDiv = <div className=\"editor-pane\">\n                    <Editor\n                        value={displayValue}\n                        scrollTop={this.state.scrollTop}\n                        readOnly={true}\n                        selectedLine={this.state.selectedLine}\n                        onChange={this.handleChange}\n                        onScroll={this.handleScroll}\n                        highlightActiveLine={true}\n                        mode=\"text\"/>\n                </div>;\n            }\n        }\n        if (this.state.source !== this.state.originalSource) {\n            resetButton = <div className=\"reset-wrapper\">\n                <button className=\"reset-code\" onClick={this.handleReset}>Reset</button>\n            </div>;\n        }\n        if (this.state.goalOutput !== undefined) {\n            let outputLineCount = this.countLines(this.state.output),\n                goalLineCount = this.countLines(this.state.goalOutput),\n                outputSize = Math.min(\n                    50, 1 + Math.max(outputLineCount, goalLineCount));\n            progressBar = <ProgressBar percentage={this.state.matchPercentage}/>;\n            outputHeaders = <div className=\"editor-wrapper\">\n                <h4 className=\"editor-header\">Goal output</h4>\n                <h4 className=\"editor-header\">Your output</h4>\n            </div>;\n            outputSection = <div className=\"editor-wrapper\">\n                <div className=\"editor-pane\"\n                     style={{height: outputSize*18 + \"px\"}}>\n                    <Editor\n                        value={this.state.goalOutput}\n                        markers={this.state.goalMarkers}\n                        readOnly={true}\n                        highlightActiveLine={false}\n                        mode=\"text\"/>\n                </div>\n                <div className=\"editor-pane\">\n                    <Editor\n                        value={this.state.output}\n                        markers={this.state.outputMarkers}\n                        readOnly={true}\n                        highlightActiveLine={false}\n                        mode=\"text\"/>\n                </div>\n            </div>;\n        }\n        return (\n            <div className=\"codeSample\">\n                <div className=\"editor-wrapper\">\n                    <div className=\"editor-pane\"\n                        ref={this.editorRef}\n                        style={{height: sourceLineCount*18 + \"px\"}}>\n                        <Editor\n                            value={this.state.source}\n                            scrollTop={this.state.scrollTop}\n                            onChange={this.handleChange}\n                            onScroll={this.handleScroll}\n                            onCursorChange={this.handleCursorChange}\n                            highlightActiveLine={true}\n                            mode=\"python\"/>\n                    </div>\n                    {displayDiv}\n                </div>\n                {resetButton}\n                {progressBar}\n                {outputHeaders}\n                {outputSection}\n          </div>\n    );\n  }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        let app = this;\n        this.state = {\n            source: tutorials['index'],\n            pythonMessage: 'Loading Python...'\n        };\n\n        // noinspection JSUnresolvedVariable\n        if (window.languagePluginLoader === undefined) {\n            this.state.pythonMessage = 'Python is not loaded!';\n        } else {\n            // noinspection JSUnresolvedVariable\n            window.languagePluginLoader.then(function() {\n                // noinspection JSUnresolvedVariable,JSUnresolvedFunction\n                window.pyodide.loadPackage('space-tracer').then(() => {\n                    // noinspection JSUnresolvedVariable,JSUnresolvedFunction\n                    window.pyodide.runPython(\n                        'from space_tracer.main import web_main; web_main()');\n                    app.setState({pythonMessage: null});\n                });\n            });\n        }\n        let search = window.location.search;\n        let params = new URLSearchParams(search);\n        let tutorialName = params.get('tutorial');\n        if (tutorialName) {\n            this.state.source = tutorials[tutorialName];\n            if (this.state.source === undefined) {\n                this.state.source = 'Tutorial not found: ' + tutorialName;\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <PythonContext.Provider value={this.state.pythonMessage}>\n                    <ReactMarkdown\n                        source={this.state.source}\n                        renderers={{\n                            code: CodeSample,\n                            link: FootnoteBuilder\n                        }}/>\n                </PythonContext.Provider>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}