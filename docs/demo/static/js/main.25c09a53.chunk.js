(this["webpackJsonplive-py"]=this["webpackJsonplive-py"]||[]).push([[0],{127:function(e,n,t){},132:function(e,n,t){"use strict";t.r(n);var a=t(1),o=t.n(a),s=t(30),i=t.n(s),r=(t(38),t(31)),l=t.n(r),h=t(32),c=t.n(h),u=t(33);function d(e){if(e.startsWith("'")&&e.endsWith("'")||e.startsWith('"')&&e.endsWith('"')){e=e.substring(1,e.length-1);let n="";for(let t=0;t<e.length;t++){const a=e[t];if("\\"!==a||t===e.length-1)n+=a;else{const o=e[++t];switch(o){case"\\":n+="\\";break;case"'":n+="'";break;case"n":n+="\n";break;case"r":n+="\r";break;case"t":n+="\t";break;case"x":if(t+2<e.length){const a=parseInt(e.substring(t+1,t+3),16);n+=String.fromCharCode(a),t+=2;break}n+=a,n+=o;break;default:n+=a,n+=o}}}e=n}else e.match(/^[0-9.]+$/)&&(e=parseFloat(e));return e}class p{constructor(e,n,t,a,o,s,i){if(void 0!==a)this.sourceCode=e,this.goalSourceCode=a,this.isLive=!0,this.isCanvas=s;else if(!1===o)this.sourceCode=e,this.isLive=o,this.isCanvas=!1;else if(void 0!==s)this.sourceCode=e,this.isLive=o,this.isCanvas=s;else{let n=/^(.*\n)?( *##+ *((static)|(live)|(canvas))[ #]*\n)(.*)$/is.exec(e);if(null!==n)this.sourceCode=(n[1]||"")+n[7],this.isLive="static"!==n[3].toLowerCase(),this.isCanvas="canvas"===n[3].toLowerCase();else if(/>>>/.test(e))this.sourceCode=e,this.isLive=!1,this.isCanvas=!1;else{this.isLive=!0,this.isCanvas=!1;let n=e.split(/ *##+ *Goal[ #]*\n/i);this.sourceCode=n[0],this.goalSourceCode=n[1]}}if(void 0!==n&&this.isLive){this.isCanvas?void 0===i&&(i=[300,150]):i=void 0;let e=n(this.sourceCode,i);if(this.display=e.get(0),this.output=e.get(1),this.isCanvas){const e=this.display.split(/\r\n|(?!\r\n)[\n-\r\x85\u2028\u2029]/);let n;for(e.shift(),this.canvasCommands=[];e.length;){const t=e.shift();if("."===t)break;if(t.startsWith("    ")){const e=t.indexOf("=");if(-1===e)n.coords.push(parseInt(t));else{const a=t.substring(4,e),o=t.substring(e+1);if("font"!==a)n[a]=d(o);else{const e=o.match(/\('([^']*)', (\d+), '([^']*)'\)/);let t="Arial",s=8,i="normal";void 0!==e&&(t=e[1],s=e[2],i=e[3]),n[a]="".concat(i," ").concat(s,"px ").concat(t)}}}else void 0!==n&&this.canvasCommands.push(n),n={name:t,coords:[]}}this.display=e.join("\n")}if(void 0!==t)this.goalOutput=t;else if(void 0!==this.goalSourceCode){let e=n(this.goalSourceCode);this.goalOutput=e.get(1)}if(void 0!==this.goalOutput){let e=Object(u.diffChars)(this.goalOutput,this.output),n=0,t=0,a=0,o=0,s=0,i=0,r=e.map((e=>{let r=(e.value.match(/\n/g)||"").length,l=n+r,h=t+e.value.length,c=a+r,u=o+e.value.length;e.added||e.removed?i+=e.value.length:s+=2*e.value.length;let d={startRow:n,startCol:t,endRow:l,endCol:h,className:"change-marker warning",type:"text",added:e.added,removed:e.removed};if(e.removed||(d.startRow=a,d.startCol=o,d.endRow=c,d.endCol=u),r>0){let n=e.value.lastIndexOf("\n");d.endCol=e.value.length-n-1,h=u=d.endCol}return e.added||(n=l,t=h),e.removed||(a=c,o=u),d}));this.goalMarkers=r.filter((e=>e.removed)),this.outputMarkers=r.filter((e=>e.added)),r.forEach((e=>{delete e.added,delete e.removed})),this.matchPercentage=s/(s+i)*100}}}}t(127);var m=t(16),f=(t(128),t(129),t(130),t(0));const g=o.a.createContext("Python is loading...");class y extends a.Component{render(){let e=this.props.percentage<50?"danger":this.props.percentage<100?"warning":"success";return Object(f.jsx)("div",{className:"progressbar-wrapper ",children:Object(f.jsx)("div",{className:"progressbar-filler "+e,style:{width:"".concat(this.props.percentage,"%")}})})}}class b extends a.Component{constructor(e){super(e),this.state={selectedLine:void 0},this.content=o.a.createRef(),this.handleScroll=this.handleScroll.bind(this)}handleScroll(){this.props.onScroll(this.content.current.editor.session.getScrollTop())}componentDidUpdate(){this.content.current.editor.session.setScrollTop(this.props.scrollTop),this.props.selectedLine!==this.state.selectedLine&&(this.setState({selectedLine:this.props.selectedLine}),this.content.current.editor.gotoLine(this.props.selectedLine+1)),this.content.current.editor.resize()}render(){return Object(f.jsx)(l.a,{ref:this.content,value:this.props.value,onChange:this.props.onChange,readOnly:this.props.readOnly,onScroll:this.handleScroll,onSelectionChange:this.props.onSelectionChange,onCursorChange:this.props.onCursorChange,mode:this.props.mode,theme:"github",width:"100%",height:"100%",fontSize:18,showPrintMargin:!0,markers:this.props.markers,showGutter:!0,highlightActiveLine:this.props.highlightActiveLine,editorProps:{$blockScrolling:1/0},setOptions:{showLineNumbers:!0,tabSize:4}})}}class w extends a.Component{render(){let e={href:this.props.href};this.props["data-sourcepos"]&&(e["data-sourcepos"]=this.props["data-sourcepos"]);let n=/^#(footnote\d+)$/i.exec(e.href);return null!==n?e.name=n[1]+"ref":(n=/^#(footnote\d+)ref$/i.exec(e.href),null!==n&&(e.name=n[1])),o.a.createElement("a",e,this.props.children)}}class v extends a.Component{constructor(e){super(e),this.handleResize=()=>{this.state.isCanvas&&this.handleChange()};let n=null===this.context?window.analyze:void 0,t=new p(e.value,n);this.state={scrollTop:0,selectedLine:void 0,isPythonLoaded:!1,source:t.sourceCode,originalSource:t.sourceCode,goalSourceCode:t.goalSourceCode,display:t.display,goalOutput:t.goalOutput,output:t.output,goalMarkers:t.goalMarkers,outputMarkers:t.outputMarkers,matchPercentage:t.matchPercentage,isLive:t.isLive,isCanvas:t.isCanvas,canvasCommands:t.canvasCommands},this.handleChange=this.handleChange.bind(this),this.handleReset=this.handleReset.bind(this),this.handleScroll=this.handleScroll.bind(this),this.handleCursorChange=this.handleCursorChange.bind(this),this.editorRef=o.a.createRef(),this.canvasRef=o.a.createRef()}handleChange(e){void 0===e&&(e=this.state.source);let n=null===this.context?window.analyze:void 0,t=this.canvasRef.current,a=null===t?void 0:[t.width,t.height],o=new p(e,n,this.state.goalOutput,this.state.goalSourceCode,this.state.isLive,this.state.isCanvas,a);this.setState({source:e,display:o.display,output:o.output,goalOutput:o.goalOutput,goalMarkers:o.goalMarkers,outputMarkers:o.outputMarkers,matchPercentage:o.matchPercentage,canvasCommands:o.canvasCommands}),this.drawCanvas(o.canvasCommands)}handleReset(){this.handleChange(this.state.originalSource)}handleScroll(e){this.setState({scrollTop:e})}handleCursorChange(e){this.setState({selectedLine:e.getSelectionLead().row})}componentDidMount(){window.addEventListener("resize",this.handleResize),this.drawCanvas(this.state.canvasCommands)}componentWillUnmount(){window.removeEventListener("resize",this.handleResize)}drawCanvas(e){const n=this.canvasRef.current;if(null===n||void 0===e)return;n.width=this.editorRef.current.clientWidth,n.height=this.editorRef.current.clientHeight;const t=n.getContext("2d");t.lineCap="round",t.clearRect(0,0,n.width,n.height);for(const a of e)if("bgcolor"===a.name&&(t.fillStyle=a.fill,t.fillRect(0,0,n.width,n.height)),"create_line"===a.name)t.beginPath(),t.moveTo(a.coords[0],a.coords[1]),t.lineTo(a.coords[2],a.coords[3]),t.lineWidth=a.pensize,t.strokeStyle=a.fill,t.stroke();else if("create_polygon"===a.name){t.beginPath(),t.moveTo(a.coords[0],a.coords[1]);for(let e=2;e<a.coords.length;e+=2)t.lineTo(a.coords[e],a.coords[e+1]);t.fillStyle=a.fill,t.fill("evenodd")}else"create_text"===a.name&&(t.font=a.font,t.fillStyle=a.fill,t.textAlign="sw"===a.anchor?"left":"se"===a.anchor?"right":"center",t.fillText(a.text,a.coords[0],a.coords[1]))}componentDidUpdate(e,n){null!==this.context?this.context!==this.state.display&&this.setState({display:this.context}):this.state.isPythonLoaded||(this.handleChange(),this.setState({isPythonLoaded:!0}))}countLines(e){return e.split(/\r\n|\r|\n/).length}render(){let e=this.context;null===e&&(e=this.state.display);let n=null,t=null,a=null,o=null,s=null,i=1+this.countLines(this.state.source);if(this.state.isLive&&(n=this.state.isCanvas?Object(f.jsx)("canvas",{ref:this.canvasRef,height:18*i}):Object(f.jsx)("div",{className:"editor-pane",children:Object(f.jsx)(b,{value:e,scrollTop:this.state.scrollTop,readOnly:!0,selectedLine:this.state.selectedLine,onChange:this.handleChange,onScroll:this.handleScroll,highlightActiveLine:!0,mode:"text"})})),this.state.source!==this.state.originalSource&&(s=Object(f.jsx)("div",{className:"reset-wrapper",children:Object(f.jsx)("button",{className:"reset-code",onClick:this.handleReset,children:"Reset"})})),void 0!==this.state.goalOutput){let e=this.countLines(this.state.output),n=this.countLines(this.state.goalOutput),s=Math.min(50,1+Math.max(e,n));t=Object(f.jsx)(y,{percentage:this.state.matchPercentage}),a=Object(f.jsxs)("div",{className:"editor-wrapper",children:[Object(f.jsx)("h4",{className:"editor-header",children:"Goal output"}),Object(f.jsx)("h4",{className:"editor-header",children:"Your output"})]}),o=Object(f.jsxs)("div",{className:"editor-wrapper",children:[Object(f.jsx)("div",{className:"editor-pane",style:{height:18*s+"px"},children:Object(f.jsx)(b,{value:this.state.goalOutput,markers:this.state.goalMarkers,readOnly:!0,highlightActiveLine:!1,mode:"text"})}),Object(f.jsx)("div",{className:"editor-pane",children:Object(f.jsx)(b,{value:this.state.output,markers:this.state.outputMarkers,readOnly:!0,highlightActiveLine:!1,mode:"text"})})]})}return Object(f.jsxs)("div",{className:"codeSample",children:[Object(f.jsxs)("div",{className:"editor-wrapper",children:[Object(f.jsx)("div",{className:"editor-pane",ref:this.editorRef,style:{height:18*i+"px"},children:Object(f.jsx)(b,{value:this.state.source,scrollTop:this.state.scrollTop,onChange:this.handleChange,onScroll:this.handleScroll,onCursorChange:this.handleCursorChange,highlightActiveLine:!0,mode:"python"})}),n]}),s,t,a,o]})}}v.contextType=g;class k extends a.Component{constructor(e){super(e);let n=this;this.state={source:m.index,pythonMessage:"Loading Python..."},void 0===window.languagePluginLoader?this.state.pythonMessage="Python is not loaded!":window.languagePluginLoader.then((function(){window.pyodide.loadPackage("space-tracer").then((()=>{window.pyodide.runPython("from space_tracer.main import web_main; web_main()"),n.setState({pythonMessage:null})}))}));let t=window.location.search,a=new URLSearchParams(t).get("tutorial");a&&(this.state.source=m[a],void 0===this.state.source&&(this.state.source="Tutorial not found: "+a))}render(){return Object(f.jsx)("div",{className:"app",children:Object(f.jsx)(g.Provider,{value:this.state.pythonMessage,children:Object(f.jsx)(c.a,{source:this.state.source,renderers:{code:v,link:w}})})})}}var x=k;Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(Object(f.jsx)(x,{}),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((e=>{e.unregister()}))},16:function(e){e.exports=JSON.parse("{\"index\":\"This is a demonstration of Live Coding in Python. Type some Python code in the\\neditor on the left side. The right side is a live coding display that shows\\nwhat happens inside your code when it runs. It shows variable values and print()\\ncalls, as well as a new column each time it runs through a loop or a function.\\n\\n    def search(n, a):\\n        low = 0\\n        high = len(a) - 1\\n        while low <= high:\\n            mid = low + high // 2\\n            v = a[mid]\\n            if n == v:\\n                return mid\\n            if n < v:\\n                high=mid - 1\\n            else:\\n                low=mid + 1\\n        return -1\\n    \\n    i = search(1, [1, 2, 4])\\n    print(i)\\n\\nChange the code, and see the changes inside. Try to find the bug in the example\\ncode. (Hint: try searching for different numbers.) Paste your own code to see\\nhow it works.\\n\\n# Graphics\\nInstead of showing what happens inside your code, there's also an option to show\\nturtle graphics, matplotlib graphs, and other types of graphics that update as\\nthe reader changes your code.\\n\\n    ### Canvas ###\\n    import turtle as t\\n    \\n    t.bgcolor('ivory')\\n    t.fillcolor('blue')\\n    t.begin_fill()\\n    for _ in range(4):\\n        t.forward(100)\\n        t.right(90)\\n    t.end_fill()\\n    \\n    t.mainloop()\\n\\nThe `mainloop()` call doesn't do anything here, but it lets you copy the code\\nand run it in Python. Without `mainloop()`, the turtle window immediately\\ncloses.\\n\\n# Tutorials\\nThis is a prototype for a new kind of Python tutorial where all of the code\\nexamples include a live coding display beside them. When you make changes to\\nthe code, the live coding display shows what happens as the code runs. It shows\\nwhat's in each variable, and it adds a column each time a loop or a function\\nruns.\\n\\nSome of the code samples are challenges that include a goal for you. You have to\\nedit the code until your output matches the goal output. The bar above the goal\\nwill turn from red to green as you get closer to matching.\\n\\nThis prototype is based on an early section of the official [Python tutorial].\\nPlease try it out, and then send me your feedback at the bottom. You can also\\nread the [complete tutorial] with live code samples.\\n\\n[Python tutorial]: https://docs.python.org/3/tutorial/controlflow.html\\n[complete tutorial]: ?tutorial=cpython/controlflow\\n\\n## for Statements\\n\\nThe `for` statement in Python differs a bit from what you may be used\\nto in C or Pascal.  Rather than always iterating over an arithmetic progression\\nof numbers (like in Pascal), or giving the user the ability to define both the\\niteration step and halting condition (as C), Python's `for` statement\\niterates over the items of any sequence (a list or a string), in the order that\\nthey appear in the sequence.  For example:\\n\\n    # Measure some strings:\\n    words = ['cat', 'window', 'defenestrate']\\n    for w in words:\\n        print(w, len(w))\\n\\nCode that modifies a collection while iterating over that same collection can\\nbe tricky to get right.  Instead, it is usually more straight-forward to loop\\nover a copy of the collection or to create a new collection:\\n\\n    users = {'alice': 'active', 'bob': 'inactive'}\\n    \\n    # Strategy:  Create a new collection\\n    active_users = {}\\n    for user, status in users.items():\\n        if status == 'active':\\n            active_users[user] = status\\n    print(active_users)\\n    \\n    # Strategy:  Iterate over a copy\\n    for user, status in users.copy().items():\\n        if status == 'inactive':\\n            del users[user]\\n    print(users)\\n\\n### The range Function\\nIf you do need to iterate over a sequence of numbers, the built-in function\\n`range` comes in handy.  It generates arithmetic progressions. Try changing\\nthis code so that the output on the lower right matches the goal below. The live\\ncoding display on the upper right shows you what's happening as your code runs.\\n\\n    for i in range(5):\\n        print(i)\\n    print('---')\\n    for i in range(5):\\n        print(i)\\n    print('---')\\n    for i in range(5):\\n        print(i)\\n    \\n    ### Goal ###\\n    for i in range(5):\\n        print(i)\\n    print('---')\\n    for i in range(2):\\n        print(i)\\n    print('---')\\n    for i in range(7):\\n        print(i)\\n\\n# Feedback\\nThanks for trying out this prototype of the live coding tutorial. I'd love to\\nhear how it worked for you. If you're new to Python, did you learn something?\\nDid you try the challenge, and did you solve it? Was it too easy or too hard?\\nDid the live coding display make sense? Did anything not work in your browser?\\nWas the page slow to load?\\n\\nIf anything was broken, please create an [issue]. For any other feedback, please\\nsend me a message on [twitter] or [e-mail]. I'd love it if you told your friends\\nto try it.\\n\\n[issue]: https://github.com/donkirkby/live-py-plugin/issues\\n[twitter]: https://twitter.com/donkirkby\\n[e-mail]: mailto:donkirkby@gmail.com\",\"cpython/controlflow\":\"More Control Flow Tools\\n=======================\\n\\nBesides the `while` statement just introduced, Python knows the usual\\ncontrol flow statements known from other languages, with some twists.\\n\\n`if` Statements\\n---------------\\n\\nPerhaps the most well-known statement type is the `if` statement. For\\nexample:\\n\\n    # Change this value to see which branch of the if statement will run.\\n    x = 42\\n    \\n    if x < 0:\\n        x = 0\\n        print('Negative changed to zero')\\n    elif x == 0:\\n        print('Zero')\\n    elif x == 1:\\n        print('Single')\\n    else:\\n        print('More')\\n\\nThere can be zero or more `elif` parts, and the `else` part is optional.\\nThe keyword '`elif`' is short for 'else if', and is useful to avoid\\nexcessive indentation. An `if` ... `elif` ... `elif` ... sequence is a\\nsubstitute for the `switch` or `case` statements found in other\\nlanguages.\\n\\n`for` Statements\\n----------------\\n\\nThe `for` statement in Python differs a bit from what you may be used to\\nin C or Pascal. Rather than always iterating over an arithmetic\\nprogression of numbers (like in Pascal), or giving the user the ability\\nto define both the iteration step and halting condition (as C), Python's\\n`for` statement iterates over the items of any sequence (a list or a\\nstring), in the order that they appear in the sequence. For example (no\\npun intended):\\n\\n    # Measure some strings:\\n    words = ['cat', 'window', 'defenestrate']\\n    for w in words:\\n        print(w, len(w))\\n\\nCode that modifies a collection while iterating over that same collection can\\nbe tricky to get right.  Instead, it is usually more straight-forward to loop\\nover a copy of the collection or to create a new collection:\\n\\n    users = {'alice': 'active', 'bob': 'inactive'}\\n    \\n    # Strategy:  Create a new collection\\n    active_users = {}\\n    for user, status in users.items():\\n        if status == 'active':\\n            active_users[user] = status\\n    print(active_users)\\n    \\n    # Strategy:  Iterate over a copy\\n    for user, status in users.copy().items():\\n        if status == 'inactive':\\n            del users[user]\\n    print(users)\\n\\nThe `range()` Function\\n----------------------\\n\\nIf you do need to iterate over a sequence of numbers, the built-in\\nfunction `range()` comes in handy. It generates arithmetic progressions. Try changing\\nthis code so that the output on the lower right matches the goal below. The live\\ncoding display on the upper right shows you what's happening as your code runs.\\n\\n    for i in range(5):\\n        print(i)\\n    print('---')\\n    for i in range(5):\\n        print(i)\\n    print('---')\\n    for i in range(5):\\n        print(i)\\n    \\n    ### Goal ###\\n    for i in range(5):\\n        print(i)\\n    print('---')\\n    for i in range(2):\\n        print(i)\\n    print('---')\\n    for i in range(7):\\n        print(i)\\n\\nThe given end point is never part of the generated sequence; `range(10)`\\ngenerates 10 values, the legal indices for items of a sequence of length 10.\\nIt is possible to let the range start at another number, or to\\nspecify a different increment (even negative; sometimes this is called\\nthe 'step'):\\n\\n    print(list(range(5, 10)))\\n    \\n    print(list(range(0, 10, 3)))\\n\\n    print(list(range(-10, -100, -30)))\\n    \\n    ### Goal ###\\n    print(list(range(6, 9)))\\n    \\n    print(list(range(0, 10, 4)))\\n\\n    print(list(range(-10, -50, -20)))\\n\\nTo iterate over the indices of a sequence, you can combine `range()` and\\n`len()` as follows:\\n\\n    a = ['Mary', 'had', 'a', 'little', 'lamb']\\n    for i in range(len(a)):\\n        print(i, a[i])\\n\\nIn most such cases, however, it is convenient to use the `enumerate()`\\nfunction, see\\n[Looping Techniques](https://docs.python.org/3/tutorial/datastructures.html#tut-loopidioms).\\n\\nA strange thing happens if you just print a range:\\n\\n    print(range(10))\\n\\nIn many ways the object returned by `range()` behaves as if it is a\\nlist, but in fact it isn't. It is an object which returns the successive\\nitems of the desired sequence when you iterate over it, but it doesn't\\nreally make the list, thus saving space.\\n\\nWe say such an object is *iterable*, that is, suitable as a target for\\nfunctions and constructs that expect something from which they can\\nobtain successive items until the supply is exhausted. We have seen that\\nthe `for` statement is such an *iterator*. The function `list()` is\\nanother; it creates lists from iterables:\\n\\n    x = list(range(5))\\n    print(x[2])\\n\\nLater we will see more functions that return iterables and take\\niterables as arguments.\\n\\n`break` and `continue` Statements, and `else` Clauses on Loops\\n--------------------------------------------------------------\\n\\nThe `break` statement, like in C, breaks out of the smallest enclosing\\n`for` or `while` loop.\\n\\nLoop statements may have an `else` clause; it is executed when the loop\\nterminates through exhaustion of the list (with `for`) or when the\\ncondition becomes false (with `while`), but not when the loop is\\nterminated by a `break` statement. This is exemplified by the following\\nloop, which searches for prime numbers:\\n\\n    for n in range(2, 10):\\n        for x in range(2, n):\\n            if n % x == 0:\\n                print(n, 'equals', x, '*', n//x)\\n                break\\n        else:\\n            # loop fell through without finding a factor\\n            print(n, 'is a prime number')\\n\\n(Yes, this is the correct code. Look closely: the `else` clause belongs\\nto the `for` loop, **not** the `if` statement.)\\n\\nWhen used with a loop, the `else` clause has more in common with the\\n`else` clause of a `try` statement than it does that of `if` statements:\\na `try` statement's `else` clause runs when no exception occurs, and a\\nloop's `else` clause runs when no `break` occurs. For more on the `try`\\nstatement and exceptions, see\\n[Handling Exceptions](https://docs.python.org/3/tutorial/errors.html#tut-handling).\\n\\nThe `continue` statement, also borrowed from C, continues with the next\\niteration of the loop:\\n\\n    for num in range(2, 10):\\n        if num % 2 == 0:\\n            print(\\\"Found an even number\\\", num)\\n            continue\\n        print(\\\"Found a number\\\", num)\\n\\n`pass` Statements\\n-----------------\\n\\nThe `pass` statement does nothing. It can be used when a statement is\\nrequired syntactically but the program requires no action. For example:\\n\\n    ### static ###\\n    while True:\\n        pass  # Busy-wait for keyboard interrupt (Ctrl+C)\\n\\nThis is commonly used for creating minimal classes:\\n\\n    class MyEmptyClass:\\n        pass\\n    \\nAnother place `pass` can be used is as a place-holder for a function or\\nconditional body when you are working on new code, allowing you to keep\\nthinking at a more abstract level. The `pass` is silently ignored:\\n\\n    def initlog(*args):\\n        pass   # Remember to implement this!\\n\\nDefining Functions\\n------------------\\n\\nWe can create a function that writes the Fibonacci series to an\\narbitrary boundary:\\n\\n    def fib(n):    # write Fibonacci series up to n\\n        \\\"\\\"\\\"Print a Fibonacci series up to n.\\\"\\\"\\\"\\n        a, b = 0, 1\\n        while a < n:\\n            print(a)\\n            a, b = b, a+b\\n        print()\\n   \\n    # Now call the function we just defined:\\n    fib(20)\\n\\nThe keyword `def` introduces a function *definition*. It must be\\nfollowed by the function name and the parenthesized list of formal\\nparameters. The statements that form the body of the function start at\\nthe next line, and must be indented.\\n\\nThe first statement of the function body can optionally be a string\\nliteral; this string literal is the function's documentation string, or\\n*docstring*. (More about docstrings can be found in the section\\n[Documentation Strings](https://docs.python.org/3/tutorial/controlflow.html#tut-docstrings).)\\nThere are tools which use docstrings to automatically produce online or\\nprinted documentation, or to let the user interactively browse through\\ncode; it's good practice to include docstrings in code that you write,\\nso make a habit of it.\\n\\nThe *execution* of a function introduces a new symbol table used for the\\nlocal variables of the function. More precisely, all variable\\nassignments in a function store the value in the local symbol table;\\nwhereas variable references first look in the local symbol table, then\\nin the local symbol tables of enclosing functions, then in the global\\nsymbol table, and finally in the table of built-in names. Thus, global\\nvariables cannot be directly assigned a value within a function (unless\\nnamed in a `global` statement), although they may be referenced.\\n\\nThe actual parameters (arguments) to a function call are introduced in\\nthe local symbol table of the called function when it is called; thus,\\narguments are passed using *call by value* (where the *value* is always\\nan object *reference*, not the value of the\\nobject).[[1]](#footnote1) When a function\\ncalls another function, a new local symbol table is created for that\\ncall.\\n\\nA function definition introduces the function name in the current symbol\\ntable. The value of the function name has a type that is recognized by\\nthe interpreter as a user-defined function. This value can be assigned\\nto another name which can then also be used as a function. This serves\\nas a general renaming mechanism:\\n\\n    def fib(n):\\n        a, b = 0, 1\\n        while a < n:\\n            print(a)\\n            a, b = b, a+b\\n        print()\\n    \\n    print(fib)\\n    \\n    f = fib\\n    f(10)\\n\\nComing from other languages, you might object that `fib` is not a\\nfunction but a procedure since it doesn't return a value. In fact, even\\nfunctions without a `return` statement do return a value, albeit a\\nrather boring one. This value is called `None` (it's a built-in name).\\n\\n    def fib(n):\\n        a, b = 0, 1\\n        while a < n:\\n            print(a)\\n            a, b = b, a+b\\n        print()\\n    \\n    fib(0)\\n    x = fib(0)\\n    print(x)\\n\\nIt is simple to write a function that returns a list of the numbers of the\\nFibonacci series, instead of printing it:\\n\\n    def fib2(n):  # return Fibonacci series up to n\\n        \\\"\\\"\\\"Return a list containing the Fibonacci series up to n.\\\"\\\"\\\"\\n        result = []\\n        a, b = 0, 1\\n        while a < n:\\n            result.append(a)    # see below\\n            a, b = b, a+b\\n        return result\\n   \\n    f10 = fib2(10)    # call it\\n    print(f10)        # write the result\\n\\nThis example, as usual, demonstrates some new Python features:\\n\\n-   The `return` statement returns with a value from a function.\\n    `return` without an expression argument returns `None`. Falling off\\n    the end of a function also returns `None`.\\n-   The statement `result.append(a)` calls a *method* of the list object\\n    `result`. A method is a function that 'belongs' to an object and is\\n    named `obj.methodname`, where `obj` is some object (this may be an\\n    expression), and `methodname` is the name of a method that is\\n    defined by the object's type. Different types define different\\n    methods. Methods of different types may have the same name without\\n    causing ambiguity. (It is possible to define your own object types\\n    and methods, using *classes*, see\\n    [Classes](https://docs.python.org/3/tutorial/classes.html#tut-classes))\\n    The method `append()` shown in the example is defined for list\\n    objects; it adds a new element at the end of the list. In this\\n    example it is equivalent to `result = result + [a]`, but more\\n    efficient.\\n\\nMore on Defining Functions\\n--------------------------\\n\\nIt is also possible to define functions with a variable number of\\narguments. There are three forms, which can be combined.\\n\\n### Default Argument Values\\n\\nThe most useful form is to specify a default value for one or more\\narguments. This creates a function that can be called with fewer\\narguments than it is defined to allow. For example:\\n\\n    def ask_ok(prompt, retries=4, reminder='Please try again!'):\\n        while True:\\n            ok = input(prompt)\\n            if ok in ('y', 'ye', 'yes'):\\n                return True\\n            if ok in ('n', 'no', 'nop', 'nope'):\\n                return False\\n            retries = retries - 1\\n            if retries < 0:\\n                raise ValueError('invalid user response')\\n            print(reminder)\\n\\nThis function can be called in several ways:\\n\\n-   giving only the mandatory argument:\\n    `ask_ok('Do you really want to quit?')`\\n-   giving one of the optional arguments:\\n    `ask_ok('OK to overwrite the file?', 2)`\\n-   or even giving all arguments:\\n    `ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')`\\n\\nThis example also introduces the `in` keyword. This tests whether or not\\na sequence contains a certain value.\\n\\nThe default values are evaluated at the point of function definition in\\nthe *defining* scope, so that :\\n\\n    i = 5\\n\\n    def f(arg=i):\\n        print(arg)\\n\\n    i = 6\\n    f()\\n\\nwill print `5`.\\n\\n**Important warning:** The default value is evaluated only once. This\\nmakes a difference when the default is a mutable object such as a list,\\ndictionary, or instances of most classes. For example, the following\\nfunction accumulates the arguments passed to it on subsequent calls:\\n\\n    def f(a, L=[]):\\n        L.append(a)\\n        return L\\n\\n    print(f(1))\\n    print(f(2))\\n    print(f(3))\\n\\nThis will print :\\n\\n    [1]\\n    [1, 2]\\n    [1, 2, 3]\\n\\nIf you don't want the default to be shared between subsequent calls, you\\ncan write the function like this instead:\\n\\n    def f(a, L=None):\\n        if L is None:\\n            L = []\\n        L.append(a)\\n        return L\\n\\n### Keyword Arguments\\n\\nFunctions can also be called using [keyword\\narguments](https://docs.python.org/3/glossary.html#keyword-argument) of\\nthe form `kwarg=value`. For instance, the following function:\\n\\n    def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\\n        print(\\\"-- This parrot wouldn't\\\", action, end=' ')\\n        print(\\\"if you put\\\", voltage, \\\"volts through it.\\\")\\n        print(\\\"-- Lovely plumage, the\\\", type)\\n        print(\\\"-- It's\\\", state, \\\"!\\\")\\n\\naccepts one required argument (`voltage`) and three optional arguments\\n(`state`, `action`, and `type`). This function can be called in any of\\nthe following ways:\\n\\n    parrot(1000)                                          # 1 positional argument\\n    parrot(voltage=1000)                                  # 1 keyword argument\\n    parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments\\n    parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments\\n    parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments\\n    parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword\\n\\nbut all the following calls would be invalid:\\n\\n    parrot()                     # required argument missing\\n    parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument\\n    parrot(110, voltage=220)     # duplicate value for the same argument\\n    parrot(actor='John Cleese')  # unknown keyword argument\\n\\nIn a function call, keyword arguments must follow positional arguments.\\nAll the keyword arguments passed must match one of the arguments\\naccepted by the function (e.g. `actor` is not a valid argument for the\\n`parrot` function), and their order is not important. This also includes\\nnon-optional arguments (e.g. `parrot(voltage=1000)` is valid too). No\\nargument may receive a value more than once. Here's an example that\\nfails due to this restriction:\\n\\n    >>> def function(a):\\n    ...     pass\\n    ...\\n    >>> function(0, a=0)\\n    Traceback (most recent call last):\\n      File \\\"<stdin>\\\", line 1, in ?\\n    TypeError: function() got multiple values for keyword argument 'a'\\n\\nWhen a final formal parameter of the form `**name` is present, it\\nreceives a dictionary (see\\n[Mapping Types --- dict](https://docs.python.org/3/library/stdtypes.html#typesmapping))\\ncontaining all keyword arguments except for those corresponding to a\\nformal parameter. This may be combined with a formal parameter of the\\nform `*name` (described in the next subsection) which receives a tuple\\ncontaining the positional arguments beyond the formal parameter list.\\n(`*name` must occur before `**name`.) For example, if we define a\\nfunction like this:\\n\\n    def cheeseshop(kind, *arguments, **keywords):\\n        print(\\\"-- Do you have any\\\", kind, \\\"?\\\")\\n        print(\\\"-- I'm sorry, we're all out of\\\", kind)\\n        for arg in arguments:\\n            print(arg)\\n        print(\\\"-\\\" * 40)\\n        keys = sorted(keywords.keys())\\n        for kw in keys:\\n            print(kw, \\\":\\\", keywords[kw])\\n\\nIt could be called like this:\\n\\n    cheeseshop(\\\"Limburger\\\", \\\"It's very runny, sir.\\\",\\n               \\\"It's really very, VERY runny, sir.\\\",\\n               shopkeeper=\\\"Michael Palin\\\",\\n               client=\\\"John Cleese\\\",\\n               sketch=\\\"Cheese Shop Sketch\\\")\\n\\nand of course it would print:\\n\\n    -- Do you have any Limburger ?\\n    -- I'm sorry, we're all out of Limburger\\n    It's very runny, sir.\\n    It's really very, VERY runny, sir.\\n    ----------------------------------------\\n    client : John Cleese\\n    shopkeeper : Michael Palin\\n    sketch : Cheese Shop Sketch\\n\\nNote that the list of keyword argument names is created by sorting the\\nresult of the keywords dictionary's `keys()` method before printing its\\ncontents; if this is not done, the order in which the arguments are\\nprinted is undefined.\\n\\n### Arbitrary Argument Lists\\n\\n> statement: \\\\*\\n\\nFinally, the least frequently used option is to specify that a function\\ncan be called with an arbitrary number of arguments. These arguments\\nwill be wrapped up in a tuple (see\\n[Tuples and Sequences](https://docs.python.org/3/tutorial/datastructures.html#tut-tuples)).\\nBefore the variable number of arguments, zero or more normal arguments\\nmay occur. :\\n\\n    def write_multiple_items(file, separator, *args):\\n        file.write(separator.join(args))\\n\\nNormally, these `variadic` arguments will be last in the list of formal\\nparameters, because they scoop up all remaining input arguments that are\\npassed to the function. Any formal parameters which occur after the\\n`*args` parameter are 'keyword-only' arguments, meaning that they can\\nonly be used as keywords rather than positional arguments. :\\n\\n    >>> def concat(*args, sep=\\\"/\\\"):\\n    ...     return sep.join(args)\\n    ...\\n    >>> concat(\\\"earth\\\", \\\"mars\\\", \\\"venus\\\")\\n    'earth/mars/venus'\\n    >>> concat(\\\"earth\\\", \\\"mars\\\", \\\"venus\\\", sep=\\\".\\\")\\n    'earth.mars.venus'\\n\\n### Unpacking Argument Lists\\n\\nThe reverse situation occurs when the arguments are already in a list or\\ntuple but need to be unpacked for a function call requiring separate\\npositional arguments. For instance, the built-in `range()` function\\nexpects separate *start* and *stop* arguments. If they are not available\\nseparately, write the function call with the `*`-operator to unpack the\\narguments out of a list or tuple:\\n\\n    >>> list(range(3, 6))            # normal call with separate arguments\\n    [3, 4, 5]\\n    >>> args = [3, 6]\\n    >>> list(range(*args))            # call with arguments unpacked from a list\\n    [3, 4, 5]\\n\\n> statement: \\\\*\\\\*\\n\\nIn the same fashion, dictionaries can deliver keyword arguments with the\\n`**`\\n-operator:\\n\\n    >>> def parrot(voltage, state='a stiff', action='voom'):\\n    ...     print(\\\"-- This parrot wouldn't\\\", action, end=' ')\\n    ...     print(\\\"if you put\\\", voltage, \\\"volts through it.\\\", end=' ')\\n    ...     print(\\\"E's\\\", state, \\\"!\\\")\\n    ...\\n    >>> d = {\\\"voltage\\\": \\\"four million\\\", \\\"state\\\": \\\"bleedin' demised\\\", \\\"action\\\": \\\"VOOM\\\"}\\n    >>> parrot(**d)\\n    -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !\\n\\n### Lambda Expressions\\n\\nSmall anonymous functions can be created with the `lambda` keyword. This\\nfunction returns the sum of its two arguments: `lambda a, b: a+b`.\\nLambda functions can be used wherever function objects are required.\\nThey are syntactically restricted to a single expression. Semantically,\\nthey are just syntactic sugar for a normal function definition. Like\\nnested function definitions, lambda functions can reference variables\\nfrom the containing scope:\\n\\n    >>> def make_incrementor(n):\\n    ...     return lambda x: x + n\\n    ...\\n    >>> f = make_incrementor(42)\\n    >>> f(0)\\n    42\\n    >>> f(1)\\n    43\\n\\nThe above example uses a lambda expression to return a function. Another\\nuse is to pass a small function as an argument:\\n\\n    >>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]\\n    >>> pairs.sort(key=lambda pair: pair[1])\\n    >>> pairs\\n    [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]\\n\\n### Documentation Strings\\n\\nHere are some conventions about the content and formatting of\\ndocumentation strings.\\n\\nThe first line should always be a short, concise summary of the object's\\npurpose. For brevity, it should not explicitly state the object's name\\nor type, since these are available by other means (except if the name\\nhappens to be a verb describing a function's operation). This line\\nshould begin with a capital letter and end with a period.\\n\\nIf there are more lines in the documentation string, the second line\\nshould be blank, visually separating the summary from the rest of the\\ndescription. The following lines should be one or more paragraphs\\ndescribing the object's calling conventions, its side effects, etc.\\n\\nThe Python parser does not strip indentation from multi-line string\\nliterals in Python, so tools that process documentation have to strip\\nindentation if desired. This is done using the following convention. The\\nfirst non-blank line *after* the first line of the string determines the\\namount of indentation for the entire documentation string. (We can't use\\nthe first line since it is generally adjacent to the string's opening\\nquotes so its indentation is not apparent in the string literal.)\\nWhitespace \\\"equivalent\\\" to this indentation is then stripped from the\\nstart of all lines of the string. Lines that are indented less should\\nnot occur, but if they occur all their leading whitespace should be\\nstripped. Equivalence of whitespace should be tested after expansion of\\ntabs (to 8 spaces, normally).\\n\\nHere is an example of a multi-line docstring:\\n\\n    >>> def my_function():\\n    ...     \\\"\\\"\\\"Do nothing, but document it.\\n    ...\\n    ...     No, really, it doesn't do anything.\\n    ...     \\\"\\\"\\\"\\n    ...     pass\\n    ...\\n    >>> print(my_function.__doc__)\\n    Do nothing, but document it.\\n\\n        No, really, it doesn't do anything.\\n\\n### Function Annotations\\n\\n[Function\\nannotations](https://docs.python.org/3/reference/compound_stmts.html#function)\\nare completely optional metadata information about the types used by\\nuser-defined functions (see PEP 484 for more information).\\n\\nAnnotations are stored in the `__annotations__` attribute of the\\nfunction as a dictionary and have no effect on any other part of the\\nfunction. Parameter annotations are defined by a colon after the\\nparameter name, followed by an expression evaluating to the value of the\\nannotation. Return annotations are defined by a literal `->`, followed\\nby an expression, between the parameter list and the colon denoting the\\nend of the `def` statement. The following example has a positional\\nargument, a keyword argument, and the return value annotated:\\n\\n    >>> def f(ham: str, eggs: str = 'eggs') -> str:\\n    ...     print(\\\"Annotations:\\\", f.__annotations__)\\n    ...     print(\\\"Arguments:\\\", ham, eggs)\\n    ...     return ham + ' and ' + eggs\\n    ...\\n    >>> f('spam')\\n    Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}\\n    Arguments: spam eggs\\n    'spam and eggs'\\n\\nIntermezzo: Coding Style\\n------------------------\\n\\nNow that you are about to write longer, more complex pieces of Python,\\nit is a good time to talk about *coding style*. Most languages can be\\nwritten (or more concise, *formatted*) in different styles; some are\\nmore readable than others. Making it easy for others to read your code\\nis always a good idea, and adopting a nice coding style helps\\ntremendously for that.\\n\\nFor Python, PEP 8 has emerged as the style guide that most projects\\nadhere to; it promotes a very readable and eye-pleasing coding style.\\nEvery Python developer should read it at some point; here are the most\\nimportant points extracted for you:\\n\\n-   Use 4-space indentation, and no tabs.\\n\\n    4 spaces are a good compromise between small indentation (allows\\n    greater nesting depth) and large indentation (easier to read). Tabs\\n    introduce confusion, and are best left out.\\n\\n-   Wrap lines so that they don't exceed 79 characters.\\n\\n    This helps users with small displays and makes it possible to have\\n    several code files side-by-side on larger displays.\\n\\n-   Use blank lines to separate functions and classes, and larger blocks\\n    of code inside functions.\\n-   When possible, put comments on a line of their own.\\n-   Use docstrings.\\n-   Use spaces around operators and after commas, but not directly\\n    inside bracketing constructs: `a = f(1, 2) + g(3, 4)`.\\n-   Name your classes and functions consistently; the convention is to\\n    use `CamelCase` for classes and `lower_case_with_underscores` for\\n    functions and methods. Always use `self` as the name for the first\\n    method argument (see\\n    [A First Look at Classes](https://docs.python.org/3/tutorial/classes.html#tut-firstclasses)\\n    for more on classes and methods).\\n-   Don't use fancy encodings if your code is meant to be used in\\n    international environments. Python's default, UTF-8, or even plain\\n    ASCII work best in any case.\\n-   Likewise, don't use non-ASCII characters in identifiers if there is\\n    only the slightest chance people speaking a different language will\\n    read or maintain the code.\\n\\n**Footnotes**\\n\\n[[1]](#footnote1ref) Actually, *call by object reference* would be a better\\ndescription, since if a mutable object is passed, the caller will see any\\nchanges the callee makes to it (items inserted into a list).\\n\"}")},38:function(e,n,t){}},[[132,1,2]]]);
//# sourceMappingURL=main.25c09a53.chunk.js.map