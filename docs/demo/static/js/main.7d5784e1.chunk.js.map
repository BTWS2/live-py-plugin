{"version":3,"sources":["SampleAnalyst.js","App.js","serviceWorker.js","index.js"],"names":["unescapeString","value","startsWith","endsWith","substring","length","newValue","i","c","c2","charCode","parseInt","String","fromCharCode","match","parseFloat","parseCanvasCommands","display","displayLines","split","canvasCommands","currentCommand","shift","nextLine","position","indexOf","coords","push","fieldName","fieldValue","fontMatch","fontName","fontSize","styleNames","undefined","name","join","SampleAnalyst","constructor","sourceCode","run","goalOutput","goalCanvasCommands","goalSourceCode","isLive","isCanvas","canvasSize","this","sourcePieces","exec","toLowerCase","test","splitSource","result","get","output","remainingDisplay","goalResult","displayParts","diffs","diffChars","goalLineNumber","goalColumnNumber","outputLineNumber","outputColumnNumber","matchCount","mismatchCount","allMarkers","map","diff","lineCount","lastGoalLine","lastGoalColumn","lastOutputLine","lastOutputColumn","added","removed","marker","startRow","startCol","endRow","endCol","className","type","lastNewLine","lastIndexOf","goalMarkers","filter","outputMarkers","forEach","matchPercentage","PythonContext","React","createContext","comparePixel","colour1","colour2","tolerance","r1","g1","b1","a1","r2","g2","b2","a2","Math","max","abs","floor","pixelStart","imageData","x","y","width","slicePixel","start","data","slice","ProgressBar","Component","render","stateClass","props","percentage","style","Editor","super","state","selectedLine","content","createRef","handleScroll","bind","onScroll","current","editor","session","getScrollTop","componentDidUpdate","setScrollTop","scrollTop","setState","gotoLine","resize","ref","onChange","readOnly","onSelectionChange","onCursorChange","mode","theme","height","showPrintMargin","markers","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","showLineNumbers","tabSize","FootnoteBuilder","coreProps","href","createElement","children","CodeSample","handleResize","handleChange","codeRunner","context","window","analyze","analyst","isPythonLoaded","source","originalSource","canvasWidth","canvasHeight","updateTimer","scheduleUpdate","updateDisplay","handleReset","handleCursorChange","editorRef","canvasRef","goalCanvasRef","diffCanvasRef","newSource","clearInterval","setInterval","canvas","isResized","drawCanvas","compareCanvases","liveCanvas","goalCanvas","diffCanvas","clientWidth","backgroundColor","command","fill","backgroundColour","backgroundPixel","liveContext","getContext","goalContext","diffContext","liveData","getImageData","goalData","diffData","createImageData","diffCount","foregroundCount","livePixel","goalPixel","isMatch","diffPixel","isLiveBackground","isGoalBackground","set","putImageData","selection","getSelectionLead","row","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","commands","ctx","lineCap","clearRect","fillStyle","fillRect","beginPath","moveTo","lineTo","lineWidth","pensize","strokeStyle","stroke","font","textAlign","anchor","fillText","text","prevProps","prevState","countLines","displayValue","displayDiv","progressBar","outputHeaders","outputSection","resetButton","sourceLineCount","onClick","outputLineCount","goalLineCount","outputSize","min","contextType","App","app","tutorials","pythonMessage","languagePluginLoader","then","pyodide","loadPackage","runPython","search","location","tutorialName","URLSearchParams","Provider","renderers","code","link","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d5784e1.chunk.js","sourcesContent":["import { diffChars } from 'diff';\n\nfunction unescapeString(value) {\n    if ((value.startsWith(\"'\") && value.endsWith(\"'\")) ||\n        (value.startsWith('\"') && value.endsWith('\"'))) {\n        value = value.substring(1, value.length - 1);\n        let newValue = '';\n        for (let i = 0; i < value.length; i++) {\n            const c = value[i];\n            if (c !== '\\\\' || i === value.length - 1) {\n                newValue += c;\n            } else {\n                const c2 = value[++i];\n                switch (c2) {\n                    case '\\\\':\n                        newValue += '\\\\';\n                        break;\n                    case '\\'':\n                        newValue += '\\'';\n                        break;\n                    case 'n':\n                        newValue += '\\n';\n                        break;\n                    case 'r':\n                        newValue += '\\r';\n                        break;\n                    case 't':\n                        newValue += '\\t';\n                        break;\n                    case 'x':\n                        if (i+2 < value.length)\n                        {\n                            const charCode = parseInt(\n                                value.substring(i+1, i+3),\n                                16);\n                            newValue += String.fromCharCode(charCode);\n                            i += 2;\n                            break;\n                        }\n                        newValue += c;\n                        newValue += c2;\n                        break;\n                    default:\n                        newValue += c;\n                        newValue += c2;\n                        break;\n                }\n            }\n        }\n        value = newValue;\n    } else if (value.match(/^[0-9.]+$/)) {\n        value = parseFloat(value);\n    }\n    return value;\n}\n\nfunction parseCanvasCommands(display) {\n    const displayLines = display.split(/\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/),\n        canvasCommands = [];\n    displayLines.shift();  // start_canvas\n    let currentCommand = undefined;\n    while (displayLines.length) {\n        const nextLine = displayLines.shift();\n        if (nextLine === '.') {\n            break;\n        }\n        if ( ! nextLine.startsWith('    ')) {\n            if (currentCommand !== undefined) {\n                canvasCommands.push(currentCommand);\n            }\n            currentCommand = {name: nextLine, coords: []};\n        } else {\n            const position = nextLine.indexOf('=');\n            if (position === -1) {\n                currentCommand.coords.push(parseInt(nextLine));\n            } else {\n                const fieldName = nextLine.substring(4, position),\n                    fieldValue = nextLine.substring(position+1);\n                if (fieldName !== 'font') {\n                    currentCommand[fieldName] = unescapeString(\n                        fieldValue);\n                } else {\n                    const fontMatch = fieldValue.match(\n                        /\\('([^']*)', (\\d+), '([^']*)'\\)/);\n                    let fontName = 'Arial',\n                        fontSize = 8,\n                        styleNames = 'normal';\n                    if (fontMatch !== undefined) {\n                        fontName = fontMatch[1];\n                        fontSize = fontMatch[2];\n                        styleNames = fontMatch[3];\n                    }\n                    currentCommand[fieldName] = (\n                        `${styleNames} ${fontSize}px ${fontName}`);\n                }\n            }\n        }\n    }\n    const remainingDisplay = displayLines.join('\\n');\n    return [canvasCommands, remainingDisplay];\n}\n\nexport default class SampleAnalyst {\n\n    constructor(sourceCode,\n                run,\n                goalOutput,\n                goalCanvasCommands,\n                goalSourceCode,\n                isLive,\n                isCanvas,\n                canvasSize) {\n        if (goalSourceCode !== undefined) {\n            this.sourceCode = sourceCode;\n            this.goalSourceCode = goalSourceCode;\n            this.isLive = true;\n            this.isCanvas = isCanvas;\n        } else if (isLive === false) {\n            this.sourceCode = sourceCode;\n            this.isLive = isLive;\n            this.isCanvas = false;\n        } else if (isCanvas !== undefined) {\n            this.sourceCode = sourceCode;\n            this.isLive = isLive;\n            this.isCanvas = isCanvas;\n        } else {\n            let sourcePieces =\n                /^(.*\\n)?( *##+ *((static)|(live)|(canvas))[ #]*\\n)(.*)$/is.exec(\n                    sourceCode);\n            if (sourcePieces !== null) {\n                this.sourceCode = (sourcePieces[1] || \"\") + sourcePieces[7];\n                this.isLive = sourcePieces[3].toLowerCase() !== \"static\";\n                this.isCanvas = sourcePieces[3].toLowerCase() === \"canvas\";\n            } else if (/>>>/.test(sourceCode)) {\n                this.sourceCode = sourceCode;\n                this.isLive = false;\n                this.isCanvas = false;\n            } else {\n                this.isLive = true;\n                this.isCanvas = false;\n                this.sourceCode = sourceCode;\n            }\n            if (this.isLive) {\n                let splitSource = this.sourceCode.split(/ *##+ *Goal[ #]*\\n/i);\n                this.sourceCode = splitSource[0];\n                this.goalSourceCode = splitSource[1];\n            }\n        }\n        if (run !== undefined && this.isLive) {\n            if ( ! this.isCanvas) {\n                canvasSize = undefined;\n            } else if (canvasSize === undefined) {\n                canvasSize = [300, 150];\n            }\n            let result = run(this.sourceCode, canvasSize);\n            this.display = result.get(0);\n            this.output = result.get(1);\n\n            if (this.isCanvas) {\n                const [canvasCommands, remainingDisplay] = parseCanvasCommands(\n                    this.display);\n                this.canvasCommands = canvasCommands;\n                this.display = remainingDisplay;\n            }\n            if (goalOutput !== undefined) {\n                this.goalOutput = goalOutput;\n                this.goalCanvasCommands = goalCanvasCommands;\n            } else if (this.goalSourceCode !== undefined) {\n                let goalResult = run(this.goalSourceCode, canvasSize);\n                this.goalOutput = goalResult.get(1);\n                if (this.isCanvas) {\n                    const goalDisplay = goalResult.get(0),\n                        displayParts = parseCanvasCommands(goalDisplay);\n                    this.goalCanvasCommands = displayParts[0];\n                }\n            }\n            if (this.goalOutput !== undefined) {\n                let diffs = diffChars(this.goalOutput, this.output),\n                    goalLineNumber = 0,\n                    goalColumnNumber = 0,\n                    outputLineNumber = 0,\n                    outputColumnNumber = 0,\n                    matchCount = 0,\n                    mismatchCount = 0,\n                    allMarkers = diffs.map(diff => {\n                        let lineCount = (diff.value.match(/\\n/g) || '').length,\n                            lastGoalLine = goalLineNumber + lineCount,\n                            lastGoalColumn = goalColumnNumber + diff.value.length,\n                            lastOutputLine = outputLineNumber + lineCount,\n                            lastOutputColumn = outputColumnNumber + diff.value.length;\n                        if (diff.added || diff.removed) {\n                            mismatchCount += diff.value.length;\n                        } else {\n                            matchCount += 2*diff.value.length;\n                        }\n                        let marker = {\n                            startRow: goalLineNumber,\n                            startCol: goalColumnNumber,\n                            endRow: lastGoalLine,\n                            endCol: lastGoalColumn,\n                            className: \"change-marker warning\",\n                            type: \"text\",\n                            added: diff.added,\n                            removed: diff.removed\n                        };\n                        if ( ! diff.removed) {\n                            marker.startRow = outputLineNumber;\n                            marker.startCol = outputColumnNumber;\n                            marker.endRow = lastOutputLine;\n                            marker.endCol = lastOutputColumn;\n                        }\n                        if (lineCount > 0) {\n                            let lastNewLine = diff.value.lastIndexOf('\\n');\n                            marker.endCol = diff.value.length - lastNewLine - 1;\n                            lastGoalColumn = lastOutputColumn = marker.endCol;\n                        }\n                        if ( ! diff.added) {\n                            goalLineNumber = lastGoalLine;\n                            goalColumnNumber = lastGoalColumn;\n                        }\n                        if ( ! diff.removed) {\n                            outputLineNumber = lastOutputLine;\n                            outputColumnNumber = lastOutputColumn;\n                        }\n                        return marker;\n                    });\n                this.goalMarkers = allMarkers.filter(marker => marker.removed);\n                this.outputMarkers = allMarkers.filter(marker => marker.added);\n                allMarkers.forEach(marker => {\n                    delete marker.added;\n                    delete marker.removed;\n                });\n                this.matchPercentage = 100 * (\n                    matchCount / (matchCount + mismatchCount));\n            }\n        }\n    }\n}\n","import React, {Component} from 'react';\nimport AceEditor from 'react-ace';\nimport ReactMarkdown from 'react-markdown';\nimport SampleAnalyst from './SampleAnalyst.js';\nimport './App.css';\nimport tutorials from './tutorials.json';\n\nimport 'ace-builds/src-noconflict/mode-python';\nimport 'ace-builds/src-noconflict/mode-markdown';\nimport 'ace-builds/src-noconflict/theme-github';\n\nconst PythonContext = React.createContext('Python is loading...');\n\nfunction compareCanvases(liveCanvas, goalCanvas, diffCanvas, backgroundColour) {\n    const width = liveCanvas.width,\n        height = liveCanvas.height,\n        backgroundPixel = [\n            parseInt(backgroundColour.substring(1, 3), 16),\n            parseInt(backgroundColour.substring(3, 5), 16),\n            parseInt(backgroundColour.substring(5, 7), 16),\n            255\n        ],\n        liveContext = liveCanvas.getContext('2d'),\n        goalContext = goalCanvas.getContext('2d'),\n        diffContext = diffCanvas.getContext('2d'),\n        liveData = liveContext.getImageData(0, 0, width, height),\n        goalData = goalContext.getImageData(0, 0, width, height),\n        diffData = diffContext.createImageData(width, height);\n    let diffCount = 0,\n        foregroundCount = 0;\n    for (let x=0; x < width; x++) {\n        for (let y=0; y < height; y++) {\n            const livePixel = slicePixel(liveData, x, y),\n                goalPixel = slicePixel(goalData, x, y),\n                [isMatch, diffPixel] = comparePixel(livePixel, goalPixel),\n                isLiveBackground = comparePixel(livePixel, backgroundPixel)[0],\n                isGoalBackground = comparePixel(goalPixel, backgroundPixel)[0],\n                start = pixelStart(diffData, x, y);\n            if ( ! (isLiveBackground && isGoalBackground)) {\n                foregroundCount += 1;\n            }\n            if ( ! isMatch) {\n                diffCount += 1\n            }\n            diffData.data.set(diffPixel, start);\n        }\n    }\n    diffContext.putImageData(diffData, 0, 0);\n    return 100*(1 - (diffCount / foregroundCount));\n}\n\n/** Compare two pixels\n *\n * If the two colours are within the tolerance, choose a faded version of the\n * colour, otherwise add red to highlight the difference.\n * @param colour1 first colour to compare\n * @param colour2 other colour to compare to\n * @param tolerance maximum difference between r, g, b, or alpha components\n *  of the two colours.\n * @return Array [isMatch, [r, g, b, alpha]]\n */\nfunction comparePixel(colour1, colour2, tolerance) {\n    if (tolerance === undefined) {\n        tolerance = 0;\n    }\n    const [r1, g1, b1, a1] = colour1,\n        [r2, g2, b2, a2] = colour2,\n        maxDiff = Math.max(\n            Math.abs(r1-r2),\n            Math.abs(g1-g2),\n            Math.abs(b1-b2),\n            Math.abs(a1-a2));\n    if (tolerance < maxDiff) {\n        // Highlight difference\n        return [\n            false,\n            [255, Math.floor((g1+g2) / 5), Math.floor((b1+b2) / 5), 255]\n        ];\n    }\n    return [true, [r1, g1, b1, Math.floor(a1/3)]];\n}\n\nfunction pixelStart(imageData, x, y) {\n    return 4*(y*imageData.width + x);\n}\n\nfunction slicePixel(imageData, x, y) {\n    const start = pixelStart(imageData, x, y);\n    return imageData.data.slice(start, start+4);\n}\n\nclass ProgressBar extends Component {\n    render() {\n        let stateClass = (this.props.percentage < 50) ?\n            \"danger\" :\n            (this.props.percentage < 100) ?\n                \"warning\" :\n                \"success\";\n        return <div className=\"progressbar-wrapper \">\n            <div className={\"progressbar-filler \" + stateClass}\n                 style={{width: `${this.props.percentage}%`}}/>\n        </div>;\n    }\n}\n\nclass Editor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {selectedLine: undefined};\n        this.content = React.createRef();\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    handleScroll() {\n        this.props.onScroll(this.content.current.editor.session.getScrollTop());\n    }\n\n    componentDidUpdate() {\n        this.content.current.editor.session.setScrollTop(this.props.scrollTop);\n        if (this.props.selectedLine !== this.state.selectedLine) {\n            this.setState({selectedLine: this.props.selectedLine});\n            this.content.current.editor.gotoLine(this.props.selectedLine+1);\n        }\n        this.content.current.editor.resize();\n    }\n\n    render() {\n        return <AceEditor\n            ref={this.content}\n            value={this.props.value}\n            onChange={this.props.onChange}\n            readOnly={this.props.readOnly}\n            onScroll={this.handleScroll}\n            onSelectionChange={this.props.onSelectionChange}\n            onCursorChange={this.props.onCursorChange}\n            mode={this.props.mode}\n            theme=\"github\"\n            width=\"100%\"\n            height=\"100%\"\n            fontSize={18}\n            showPrintMargin={true}\n            markers={this.props.markers}\n            showGutter={true}\n            highlightActiveLine={this.props.highlightActiveLine}\n            editorProps={{\n                $blockScrolling: Infinity\n            }}\n            setOptions={{\n                showLineNumbers: true,\n                tabSize: 4,\n            }}/>;\n    }\n}\n\nclass FootnoteBuilder extends Component {\n    render() {\n        let coreProps = {href: this.props.href};\n        if (this.props['data-sourcepos']) {\n            coreProps['data-sourcepos'] = this.props['data-sourcepos'];\n        }\n        let match = /^#(footnote\\d+)$/i.exec(coreProps.href);\n        if (match !== null) {\n            coreProps.name = match[1] + \"ref\";\n        } else {\n            match = /^#(footnote\\d+)ref$/i.exec(coreProps.href);\n            if (match !== null) {\n                coreProps.name = match[1];\n            }\n        }\n        return React.createElement('a', coreProps, this.props.children);\n    }\n}\n\nclass CodeSample extends Component {\n    static contextType = PythonContext;\n\n    constructor(props) {\n        super(props);\n        let codeRunner = this.context === null ? window.analyze : undefined,\n            analyst = new SampleAnalyst(props.value, codeRunner);\n        this.state = {\n            scrollTop: 0,\n            selectedLine: undefined,\n            isPythonLoaded: false,\n            source: analyst.sourceCode,\n            originalSource: analyst.sourceCode,\n            goalSourceCode: analyst.goalSourceCode,\n            display: analyst.display,\n            goalOutput: analyst.goalOutput,\n            goalCanvasCommands: analyst.goalCanvasCommands,\n            output: analyst.output,\n            goalMarkers: analyst.goalMarkers,\n            outputMarkers: analyst.outputMarkers,\n            matchPercentage: analyst.matchPercentage,\n            isLive: analyst.isLive,\n            isCanvas: analyst.isCanvas,\n            canvasCommands: analyst.canvasCommands,\n            canvasWidth: undefined,\n            canvasHeight: undefined,\n            updateTimer: undefined\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.scheduleUpdate = this.scheduleUpdate.bind(this);\n        this.updateDisplay = this.updateDisplay.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleCursorChange = this.handleCursorChange.bind(this);\n\n        this.editorRef = React.createRef();\n        this.canvasRef = React.createRef();\n        this.goalCanvasRef = React.createRef();\n        this.diffCanvasRef = React.createRef();\n    }\n\n    handleChange(newSource) {\n        if (newSource !== undefined) {\n            this.setState({source: newSource});\n        }\n        this.scheduleUpdate();\n    }\n\n    scheduleUpdate() {\n        if (this.state.updateTimer !== undefined) {\n            clearInterval(this.state.updateTimer);\n        }\n        this.setState({\n            updateTimer: setInterval(this.updateDisplay, 300)\n        });\n    }\n\n    updateDisplay() {\n        clearInterval(this.state.updateTimer);\n        let codeRunner = this.context === null ? window.analyze : undefined,\n            canvas = this.canvasRef.current,\n            canvasSize,\n            isResized = false,\n            newSource = this.state.source;\n        if (canvas !== null) {\n            canvasSize = [canvas.width, canvas.height];\n            isResized = (canvas.width !== this.state.canvasWidth ||\n                canvas.height !== this.state.canvasHeight);\n        }\n        let goalOutput = isResized ? undefined : this.state.goalOutput,\n            goalCanvasCommands = isResized\n                ? undefined\n                : this.state.goalCanvasCommands,\n            analyst = new SampleAnalyst(\n                newSource,\n                codeRunner,\n                goalOutput,\n                goalCanvasCommands,\n                this.state.goalSourceCode,\n                this.state.isLive,\n                this.state.isCanvas,\n                canvasSize\n            );\n        this.drawCanvas(analyst.canvasCommands, this.canvasRef);\n        this.drawCanvas(analyst.goalCanvasCommands, this.goalCanvasRef);\n        let matchPercentage = this.compareCanvases(analyst.goalCanvasCommands);\n        if (matchPercentage === undefined) {\n            matchPercentage = analyst.matchPercentage;\n        }\n        this.setState({\n            source: newSource,\n            display: analyst.display,\n            output: analyst.output,\n            goalOutput: analyst.goalOutput,\n            goalMarkers: analyst.goalMarkers,\n            outputMarkers: analyst.outputMarkers,\n            matchPercentage: matchPercentage,\n            canvasCommands: analyst.canvasCommands,\n            goalCanvasCommands: analyst.goalCanvasCommands,\n            updateTimer: undefined\n        });\n        if (isResized) {\n            this.setState({\n                canvasWidth: canvasSize[0],\n                canvasHeight: canvasSize[1]\n            });\n        }\n    }\n\n    compareCanvases(goalCanvasCommands) {\n        const liveCanvas = this.canvasRef.current,\n            goalCanvas = this.goalCanvasRef.current,\n            diffCanvas = this.diffCanvasRef.current;\n        let matchPercentage = undefined;\n        if (diffCanvas !== null) {\n            diffCanvas.width = this.editorRef.current.clientWidth;\n            diffCanvas.height = this.editorRef.current.clientWidth * 0.75;\n            let backgroundColor = '#ffffff';\n            for (let command of goalCanvasCommands) {\n                if (command.name === 'bgcolor') {\n                    backgroundColor = command.fill;\n                }\n            }\n            matchPercentage = compareCanvases(\n                liveCanvas,\n                goalCanvas,\n                diffCanvas,\n                backgroundColor);\n        }\n        return matchPercentage;\n    }\n\n    handleReset() {\n        this.handleChange(this.state.originalSource);\n    }\n\n    handleScroll(scrollTop) {\n        this.setState({scrollTop: scrollTop});\n    }\n\n    handleCursorChange(selection) {\n        this.setState({selectedLine: selection.getSelectionLead().row});\n    }\n\n    handleResize = () => {\n        if (this.state.isCanvas) {\n            this.handleChange();\n        }\n    };\n\n    componentDidMount() {\n        window.addEventListener('resize', this.handleResize);\n        this.drawCanvas(this.state.canvasCommands, this.canvasRef);\n        this.drawCanvas(this.state.goalCanvasCommands, this.goalCanvasRef);\n        this.scheduleUpdate();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    drawCanvas(commands, canvasRef) {\n        const canvas = canvasRef.current;\n        if ((canvas === null) || (commands === undefined)) {\n            return;\n        }\n        canvas.width = this.editorRef.current.clientWidth;\n        canvas.height = this.editorRef.current.clientWidth * 0.75;\n        const ctx = canvas.getContext('2d');\n        ctx.lineCap = 'round';\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        for (const command of commands) {\n            if (command.name === 'bgcolor') {\n                ctx.fillStyle = command.fill;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            } if (command.name === 'create_line') {\n                ctx.beginPath();\n                ctx.moveTo(command.coords[0], command.coords[1]);\n                ctx.lineTo(command.coords[2], command.coords[3]);\n                ctx.lineWidth = command.pensize;\n                ctx.strokeStyle = command.fill;\n                ctx.stroke();\n            }\n            else if (command.name === 'create_polygon') {\n                ctx.beginPath();\n                ctx.moveTo(command.coords[0], command.coords[1]);\n                for (let i = 2; i < command.coords.length; i += 2) {\n                    ctx.lineTo(command.coords[i], command.coords[i+1]);\n                }\n                ctx.fillStyle = command.fill;\n                ctx.fill('evenodd');\n            }\n            else if (command.name === 'create_text') {\n                ctx.font = command.font;\n                ctx.fillStyle = command.fill;\n                ctx.textAlign = command.anchor === 'sw'\n                    ? 'left'\n                    : command.anchor === 'se'\n                    ? 'right'\n                    : 'center';\n                ctx.fillText(command.text, command.coords[0], command.coords[1]);\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.context !== null) {\n            if (this.context !== this.state.display) {\n                this.setState({display: this.context});\n            }\n        }\n        else if ( ! this.state.isPythonLoaded) {\n            this.setState({isPythonLoaded: true});\n            this.scheduleUpdate();\n        }\n        else if ((5 < Math.abs(prevState.canvasWidth - this.state.canvasWidth)) ||\n                (prevState.source !== this.state.source) ||\n                (prevState.goalCanvasCommands === undefined &&\n                    this.state.goalCanvasCommands !== undefined)) {\n            this.scheduleUpdate();\n        }\n    }\n\n    countLines(text) {\n        return text.split(/\\r\\n|\\r|\\n/).length;\n    }\n\n    render() {\n        let displayValue = this.context;\n        if (displayValue === null) {\n            displayValue = this.state.display;\n        }\n        let displayDiv = null,\n            progressBar = null,\n            outputHeaders = null,\n            outputSection = null,\n            resetButton = null,\n            sourceLineCount = 1 + this.countLines(this.state.source);\n        if (this.state.isLive) {\n            if (this.state.isCanvas) {\n                displayDiv = <canvas ref={this.canvasRef}/>;\n            } else {\n                displayDiv = <div\n                    className=\"editor-pane\"\n                    style={{height: sourceLineCount*18 + \"px\"}}>\n                    <Editor\n                        value={displayValue}\n                        scrollTop={this.state.scrollTop}\n                        readOnly={true}\n                        selectedLine={this.state.selectedLine}\n                        onChange={this.handleChange}\n                        onScroll={this.handleScroll}\n                        highlightActiveLine={true}\n                        mode=\"text\"/>\n                </div>;\n            }\n        }\n        if (this.state.source !== this.state.originalSource) {\n            resetButton = <div className=\"reset-wrapper\">\n                <button className=\"reset-code\" onClick={this.handleReset}>Reset</button>\n            </div>;\n        }\n        if (this.state.goalOutput !== undefined) {\n            let outputLineCount = this.countLines(this.state.output),\n                goalLineCount = this.countLines(this.state.goalOutput),\n                outputSize = Math.min(\n                    50, 1 + Math.max(outputLineCount, goalLineCount));\n            progressBar = <ProgressBar percentage={this.state.matchPercentage}/>;\n            if (this.state.isCanvas) {\n                outputHeaders = <div className=\"editor-wrapper\">\n                    <h4 className=\"editor-header\">Goal Canvas</h4>\n                    <h4 className=\"editor-header\">Canvas Differences</h4>\n                </div>;\n                displayDiv = <canvas ref={this.canvasRef}/>;\n                outputSection = <div className=\"editor-wrapper\">\n                    <canvas ref={this.goalCanvasRef}/>\n                    <canvas ref={this.diffCanvasRef}/>\n                </div>;\n            } else {\n                outputHeaders = <div className=\"editor-wrapper\">\n                    <h4 className=\"editor-header\">Goal output</h4>\n                    <h4 className=\"editor-header\">Your output</h4>\n                </div>;\n                outputSection = <div className=\"editor-wrapper\">\n                    <div className=\"editor-pane\"\n                         style={{height: outputSize*18 + \"px\"}}>\n                        <Editor\n                            value={this.state.goalOutput}\n                            markers={this.state.goalMarkers}\n                            readOnly={true}\n                            highlightActiveLine={false}\n                            mode=\"text\"/>\n                    </div>\n                    <div className=\"editor-pane\"\n                         style={{height: outputSize*18 + \"px\"}}>\n                        <Editor\n                            value={this.state.output}\n                            markers={this.state.outputMarkers}\n                            readOnly={true}\n                            highlightActiveLine={false}\n                            mode=\"text\"/>\n                    </div>\n                </div>;\n            }\n        }\n        return (\n            <div className=\"codeSample\">\n                <div className=\"editor-wrapper\">\n                    <div className=\"editor-pane\"\n                        ref={this.editorRef}\n                        style={{height: sourceLineCount*18 + \"px\"}}>\n                        <Editor\n                            value={this.state.source}\n                            scrollTop={this.state.scrollTop}\n                            onChange={this.handleChange}\n                            onScroll={this.handleScroll}\n                            onCursorChange={this.handleCursorChange}\n                            highlightActiveLine={true}\n                            mode=\"python\"/>\n                    </div>\n                    {displayDiv}\n                </div>\n                {resetButton}\n                {progressBar}\n                {outputHeaders}\n                {outputSection}\n          </div>\n    );\n  }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        let app = this;\n        this.state = {\n            source: tutorials['index'],\n            pythonMessage: 'Loading Python...'\n        };\n\n        // noinspection JSUnresolvedVariable\n        if (window.languagePluginLoader === undefined) {\n            this.state.pythonMessage = 'Python is not loaded!';\n        } else {\n            // noinspection JSUnresolvedVariable\n            window.languagePluginLoader.then(function() {\n                // noinspection JSUnresolvedVariable,JSUnresolvedFunction\n                window.pyodide.loadPackage('space-tracer').then(() => {\n                    // noinspection JSUnresolvedVariable,JSUnresolvedFunction\n                    window.pyodide.runPython(\n                        'from space_tracer.main import web_main; web_main()');\n                    app.setState({pythonMessage: null});\n                });\n            });\n        }\n        let search = window.location.search;\n        let params = new URLSearchParams(search);\n        let tutorialName = params.get('tutorial');\n        if (tutorialName) {\n            this.state.source = tutorials[tutorialName];\n            if (this.state.source === undefined) {\n                this.state.source = 'Tutorial not found: ' + tutorialName;\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <PythonContext.Provider value={this.state.pythonMessage}>\n                    <ReactMarkdown\n                        source={this.state.source}\n                        renderers={{\n                            code: CodeSample,\n                            link: FootnoteBuilder\n                        }}/>\n                </PythonContext.Provider>\n            </div>\n        );\n    }\n}\n\nexport default App;\nexport {compareCanvases, slicePixel};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}