{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedLine","undefined","content","React","createRef","handleScroll","bind","assertThisInitialized","onScroll","current","editor","session","getScrollTop","setScrollTop","scrollTop","setState","gotoLine","react_default","a","createElement","lib_default","ref","value","onChange","readOnly","onSelectionChange","onCursorChange","mode","theme","width","height","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","setOptions","showLineNumbers","tabSize","Component","App","_this2","display","source","handleChange","handleCursorChange","app","window","languagePluginLoader","then","pyodide","loadPackage","runPython","newSource","analyze","selection","selectionLead","row","className","href","m_react_splitters_lib_default","position","App_Editor","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce874588.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport AceEditor from 'react-ace';\nimport Splitter from 'm-react-splitters';\nimport 'm-react-splitters/lib/splitters.css';\nimport './App.css';\n\nimport 'brace/mode/python';\nimport 'brace/mode/markdown';\nimport 'brace/theme/github';\n\nclass Editor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {selectedLine: undefined};\n        this.content = React.createRef();\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    handleScroll() {\n        this.props.onScroll(this.content.current.editor.session.getScrollTop());\n    }\n\n    componentDidUpdate() {\n        this.content.current.editor.session.setScrollTop(this.props.scrollTop);\n        if (this.props.selectedLine !== this.state.selectedLine) {\n            this.setState({selectedLine: this.props.selectedLine});\n            this.content.current.editor.gotoLine(this.props.selectedLine+1);\n        }\n    }\n\n    render() {\n        return <AceEditor\n            ref={this.content}\n            value={this.props.value}\n            onChange={this.props.onChange}\n            readOnly={this.props.readOnly}\n            onScroll={this.handleScroll}\n            onSelectionChange={this.props.onSelectionChange}\n            onCursorChange={this.props.onCursorChange}\n            mode={this.props.mode}\n            theme=\"github\"\n            width=\"100%\"\n            height=\"calc(100% - 2em)\"\n            fontSize={18}\n            showPrintMargin={true}\n            showGutter={true}\n            highlightActiveLine={true}\n            editorProps={{\n                $blockScrolling: Infinity\n            }}\n            setOptions={{\n                showLineNumbers: true,\n                tabSize: 4,\n            }}/>;\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scrollTop: 0,\n            selectedLine: undefined,\n            display: 'Loading...',\n            source: `\\\ndef search(n, a):\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = low + high // 2\n        v = a[mid]\n        if n == v:\n            return mid\n        if n < v:\n            high=mid - 1\n        else:\n            low=mid + 1\n    return -1\n\ni = search(1, [1, 2, 4])\n`};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleScroll = this.handleScroll.bind(this);\n        this.handleCursorChange = this.handleCursorChange.bind(this);\n        let app = this;\n\n        if (window.languagePluginLoader === undefined) {\n            this.state.display = 'Pyodide is not loaded.';\n        } else {\n            window.languagePluginLoader.then(function() {\n                window.pyodide.loadPackage('space-tracer').then(() => {\n                    window.pyodide.runPython(\n                        'from space_tracer.main import web_main; web_main()');\n                    app.handleChange();\n                });\n            });\n        }\n    }\n\n    handleChange(newSource) {\n        if (newSource === undefined) {\n            newSource = this.state.source;\n        }\n        let display = window.analyze(newSource);\n        this.setState({source: newSource, display: display});\n    }\n\n    handleScroll(scrollTop) {\n        this.setState({scrollTop: scrollTop});\n    }\n\n    handleCursorChange(selection) {\n        this.setState({selectedLine: selection.selectionLead.row});\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <p className=\"page-header\"><a href=\"..\">Home</a></p>\n                <div className=\"splitter-wrapper\">\n                    <Splitter position=\"vertical\">\n                        <div className=\"editor-pane\">\n                            <p className=\"editor-header\">Type Some Python</p>\n                            <Editor\n                                value={this.state.source}\n                                scrollTop={this.state.scrollTop}\n                                onChange={this.handleChange}\n                                onScroll={this.handleScroll}\n                                onCursorChange={this.handleCursorChange}\n                                mode=\"python\"/>\n                        </div>\n                        <div className=\"editor-pane\">\n                            <p className=\"editor-header\">See Inside</p>\n                            <Editor\n                                value={this.state.display}\n                                scrollTop={this.state.scrollTop}\n                                readOnly={true}\n                                selectedLine={this.state.selectedLine}\n                                onChange={this.handleChange}\n                                onScroll={this.handleScroll}\n                                mode=\"text\"/>\n                        </div>\n                    </Splitter>\n                </div>\n                <div className=\"page-footer\">Change the code, and see the\n                    changes inside. Try to find the bug in the example code.\n                    (Hint: try searching for different numbers.) Paste your own\n                    code to see how it works.</div>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}