{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","display","source","handleChange","bind","assertThisInitialized","undefined","window","languagePluginLoader","then","fetch","response","text","code_tracer_source","pyodide","runPython","event","setState","target","value","react_default","a","createElement","className","href","htmlFor","onChange","rows","cols","id","readOnly","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAiFeA,qBA7EX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,aACTC,OAAM,4TAkBVT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,UAEgBa,IAAhCC,OAAOC,qBACPf,EAAKO,MAAMC,QAAUR,EAAKO,MAAME,OAEhCK,OAAOC,qBAAqBC,KAAK,WAC7BC,MAAM,kBAAkBD,KAAK,SAAUE,GACnC,OAAOA,EAASC,SACjBH,KAAK,SAAUI,GACdN,OAAOO,QAAQC,UAAUF,OA/BtBpB,4EAqCNuB,GACTpB,KAAKqB,SAAS,CAACf,OAAQc,EAAME,OAAOC,aACAb,IAAhCC,OAAOC,sBAEPZ,KAAKqB,SAAS,CAAChB,QAASe,EAAME,OAAOC,yCAKzC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,MAAR,SACHJ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,UAAf,qBACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,WAAf,gBAERL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,YAAUH,MAAOvB,KAAKI,MAAME,OAClBwB,SAAU9B,KAAKO,aACfwB,KAAK,KACLC,KAAK,KACLC,GAAG,YACjBT,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,YAAUH,MAAOvB,KAAKI,MAAMC,QAClB6B,UAAU,EACVH,KAAK,KACLC,KAAK,KACLC,GAAG,gBAIzBT,EAAAC,EAAAC,cAAA,gMAtEIS,cCSEC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.e495d89e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            display: 'Loading...',\n            source: `\\\ndef search(n, a):\n    low = 0\n    high = len(a) - 1\n    while True:\n        mid = low + high // 2\n        v = a[mid]\n        if n == v:\n            return mid\n        if n < v:\n            high=mid - 10\n            else:\n                low=mid + 1\n            return -1\n\ni = search(1, [1, 2, 4])\n`};\n\n        this.handleChange = this.handleChange.bind(this);\n\n        if (window.languagePluginLoader === undefined) {\n            this.state.display = this.state.source;\n        } else {\n            window.languagePluginLoader.then(function() {\n                fetch('code_tracer.py').then(function (response) {\n                    return response.text();\n                }).then(function (code_tracer_source) {\n                    window.pyodide.runPython(code_tracer_source);\n                });\n            });\n        }\n    }\n\n    handleChange(event) {\n        this.setState({source: event.target.value});\n        if (window.languagePluginLoader === undefined) {\n            /* Dummy analysis to use when Pyodide isn't loaded. */\n            this.setState({display: event.target.value});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n              <p><a href=\"..\">Home</a></p>\n              <table>\n                  <tbody>\n                  <tr>\n                      <th><label htmlFor=\"source\">Type Some Python</label></th>\n                      <th><label htmlFor=\"display\">See Inside</label></th>\n                  </tr>\n                  <tr>\n                      <td><textarea value={this.state.source}\n                                    onChange={this.handleChange}\n                                    rows=\"25\"\n                                    cols=\"65\"\n                                    id=\"source\"/></td>\n                      <td><textarea value={this.state.display}\n                                    readOnly={true}\n                                    rows=\"25\"\n                                    cols=\"65\"\n                                    id=\"display\"/></td>\n                  </tr>\n                  </tbody>\n              </table>\n              <p>Change the code, and see the changes inside. Try to find the bug in the\n                  example code. (Hint: try searching for different numbers.) Paste your\n                  own code to see how it works.</p>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}