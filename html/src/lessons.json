{"example": "First line of paragraph.\nSecond line.\n\n    print('code block')\n\nFinal paragraph.\n", "example2": "First line of paragraph.\nSecond line.\n\n    print('code block 2')\n\nFinal paragraph.\n", "controlflow": "# Introduction\nThis is a prototype for a new kind of Python tutorial where all of the code\nexamples include a live coding display beside them. When you make changes to\nto the code, the live coding display shows what happens as the code runs. It\nshows what's in each variable, and it adds a column each time a loop or a\nfunction runs.\n\nSome of the code samples are challenges that include a goal for you. You have to\nedit the code until your output matches the goal output. The bar below the goal\nwill turn from red to green as you get closer to matching.\n\nThis prototype is based on an early section of the official [Python tutorial].\nPlease try it out, and then send me your feedback at the bottom.\n\n# for Statements\n\nThe `for` statement in Python differs a bit from what you may be used\nto in C or Pascal.  Rather than always iterating over an arithmetic progression\nof numbers (like in Pascal), or giving the user the ability to define both the\niteration step and halting condition (as C), Python's `for` statement\niterates over the items of any sequence (a list or a string), in the order that\nthey appear in the sequence.  For example:\n\n    # Measure some strings:\n    words = ['cat', 'window', 'defenestrate']\n    for w in words:\n        print(w, len(w))\n\nCode that modifies a collection while iterating over that same collection can\nbe tricky to get right.  Instead, it is usually more straight-forward to loop\nover a copy of the collection or to create a new collection:\n\n    users = {'alice': 'active', 'bob': 'inactive'}\n    \n    # Strategy:  Create a new collection\n    active_users = {}\n    for user, status in users.items():\n        if status == 'active':\n            active_users[user] = status\n    print(active_users)\n    \n    # Strategy:  Iterate over a copy\n    for user, status in users.copy().items():\n        if status == 'inactive':\n            del users[user]\n    print(users)\n\n## The range Function\nIf you do need to iterate over a sequence of numbers, the built-in function\n`range` comes in handy.  It generates arithmetic progressions. Try changing\nthis code so that the output on the lower right matches the goal below. The live\ncoding display on the upper right shows you what's happening as your code runs.\n\n    for i in range(5):\n        print(i)\n    print('---')\n    for i in range(5):\n        print(i)\n    print('---')\n    for i in range(5):\n        print(i)\n    \n    ### Goal ###\n    for i in range(5):\n        print(i)\n    print('---')\n    for i in range(2):\n        print(i)\n    print('---')\n    for i in range(7):\n        print(i)\n\n# Feedback\nThanks for trying out this prototype of the live coding tutorial. I'd love to\nhear how it worked for you. If you're new to Python, did you learn something?\nDid you try the challenge, and did you solve it? Was it too easy or too hard?\nDid the live coding display make sense? Did anything not work in your browser?\nWas the page slow to load?\n\nIf anything was broken, please create an [issue]. For any other feedback, please\nsend me a message on [twitter] or [e-mail]. I'd love it if you told your friends\nto try it.\n\n[issue]: https://github.com/donkirkby/live-py-plugin/issues\n[twitter]: https://twitter.com/donkirkby\n[e-mail]: mailto:donkirkby@gmail.com"}